@using res = MOF.Etimad.Monafasat.Resources;
@{
   ViewData["Title"] = @res.TenderResources.DisplayInputs.NotificationStatusReport;
}
@section breadcrumb
   {
   <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
         <li class="breadcrumb-item"><a href="#"> @MOF.Etimad.Monafasat.Resources.SharedResources.DisplayInputs.MainPage</a></li>
         <li class="breadcrumb-item active" aria-current="page"> @MOF.Etimad.Monafasat.Resources.SharedResources.DisplayInputs.Reports</li>
      </ol>
   </nav>
}
@section pagecontrols{
   <div class="dropdown">
      <span class="d-block pull-left" data-toggle="tooltip" data-placement="top" title="" data-container="body" data-original-title="@MOF.Etimad.Monafasat.Resources.TenderResources.DisplayInputs.ExportTable">
         <button id="searchBtnColaps" class="btn p-2 btn-outline-primary" data-toggle="collapse" href="#" onclick="exportToExcel()" role="button" aria-expanded="false" aria-controls="Search">
            <i class="material-icons">cloud_download</i> @MOF.Etimad.Monafasat.Resources.TenderResources.DisplayInputs.ExportTable
         </button>
         <a class="btn p-2 btn-outline-primary pull-right" data-toggle="collapse" href="#SearchInBlocked" role="button" aria-expanded="false" aria-controls="SearchInBlocked">
            <i class="material-icons">search</i> @MOF.Etimad.Monafasat.Resources.SharedResources.DisplayInputs.Search
         </a>
      </span>
   </div>
}
<form class="form" id="notificationGrid">
   <div class="etd-cards" v-cloak>
      <div class="clearfix"></div>
      <div class=" collapse" id="SearchInBlocked">
         <div class="row">
            <div class="col-lg-4 col-md-6 col-sm-12 col-xs-12">
               <div class="form-group bmd-form-group">
                  <label for="publisher" class="label bmd-label-static">@res.SharedResources.DisplayInputs.Email</label>
                  <input type="text" id="Email" name="Email" maxlength="50" autocomplete="off" class="form-control">
               </div>
            </div>
            <div class="col-lg-4 col-md-6 col-sm-12 col-xs-12">
               <div class="form-group has-success bmd-form-group">
                  <label for="operationCodeList" class="label bmd-label-static">@MOF.Etimad.Monafasat.Resources.TenderResources.DisplayInputs.SendAs</label>
                  <select data-live-search="true" id="operationCode" name="operationCode" class="selectpicker" title="@MOF.Etimad.Monafasat.Resources.TenderResources.DisplayInputs.SendAs" data-style="select-with-transition" v-model="selectedOperationCode">
                     <option :value="item.operationCode" v-for="item in operationCodeList">{{item.operationCodeArabic}}</option>
                  </select>
               </div>
            </div>
            <div class="col-lg-4 col-md-6 col-sm-12 col-xs-12">
               <div class="form-group bmd-form-group">
                  <label for="publisher" class="label bmd-label-static">@res.SharedResources.DisplayInputs.Status</label>
                  <select data-live-search="true" id="SendingStatusId" name="SendingStatusId" class="selectpicker" title="@MOF.Etimad.Monafasat.Resources.TenderResources.DisplayInputs.Status" data-style="select-with-transition" v-model="selectedNotificationStatus">
                     <option :value="item.notificationStatusId" v-for="item in notificationStatusList">{{item.notificationStatusName}}</option>
                  </select>
               </div>
            </div>
            <div class="col-12">
               <button class="btn btn-sm btn-primary" @@click="search" type="button">
                  <i class="material-icons">search</i> @MOF.Etimad.Monafasat.Resources.BlockResources.DisplayInputs.Search
               </button>
               <button class="btn btn-sm " type="button" @@click="emptysearch">
                  <i class="material-icons">close</i> @MOF.Etimad.Monafasat.Resources.BlockResources.DisplayInputs.Clear
               </button>
            </div>
         </div>
      </div>
      <div class="row" style="position:relative">
         <div class="col-12">
            <div class="card">
               <div class="table-responsive">
                  <table id="notificationTable" class="table table-striped text-center">
                     <caption></caption>
                     <thead class="text-center">
                        <tr>
                           <th scope="col" class="text-center">@res.SharedResources.DisplayInputs.Email </th>
                           <th scope="col" class="text-center">@res.TenderResources.DisplayInputs.Address  </th>
                           <th scope="col" class="text-center">@res.TenderResources.DisplayInputs.SendAt  </th>
                           <th scope="col" class="text-center">@res.TenderResources.DisplayInputs.TenderName  </th>
                           <th scope="col" class="text-center">@res.TenderResources.DisplayInputs.SendAs </th>
                           <th scope="col" class="text-center">@res.TenderResources.DisplayInputs.SendTo  </th>
                           <th scope="col" class="text-center">@res.TenderResources.DisplayInputs.SendStatus </th>
                        </tr>
                     </thead>
                     <tbody class="text-center" v-if="notifications && notifications.length > 0">
                        <tr v-for="(notification, $index) in notifications">
                           <td class="text-center" data-label="@res.SharedResources.DisplayInputs.Email"> {{notification.email}} </td>
                           <td class="text-center" data-label="@res.TenderResources.DisplayInputs.Address"> {{notification.address}} </td>
                           <td class="text-center" data-label="@res.TenderResources.DisplayInputs.SendAt"> {{notification.sendAt}} </td>
                           <td class="text-center" data-label="@res.TenderResources.DisplayInputs.TenderName"> @Html.Raw(ViewBag.tenderName) </td>
                           <td class="text-center" data-label="@res.TenderResources.DisplayInputs.SendAs "> {{notification.sendAs}} </td>
                           <td class="text-center" data-label="@res.TenderResources.DisplayInputs.SendTo "> {{notification.consignee}} </td>
                           <td class="text-center" data-label="@res.TenderResources.DisplayInputs.SendStatus"> {{notification.sendStatus}} </td>
                        </tr>
                     </tbody>
                     <tbody v-else>
                        <tr>
                           <td colspan="9">
                              @res.SharedResources.ErrorMessages.NoDataFound
                           </td>
                        </tr>
                     </tbody>
                  </table>
                  <pagination :visible_pages="3" ref="vpaginator" :resource_url="resource_url" @@update="updateResource"></pagination>
               </div>
            </div>
         </div>
      </div>
   </div>
   <div class="clearfix"></div>
</form>
<script src="~/Etimad-UI/assets/js/xlsx.core.min.js"></script>
<script src="~/Etimad-UI/assets/js/xls.core.min.js"></script>
<script src="~/Etimad-UI/assets/js/xlsx.full.min.js"></script>
@section scripts{
   <script>
      var tenderId = '@Html.Raw(Html.Encode(ViewBag.tenderId))';
      var tenderName = '@Html.Raw(Html.Encode(ViewBag.tenderName))';
      var Tender = new Vue({
         el: '#notificationGrid',
         data: {
            notifications: [],
            operationCodeList: [],
            selectedOperationCode: '',
            notificationStatusList: [],
            selectedNotificationStatus: '',
            totalCount: 0,
            currentPage: 1,
            pageSize: 10,
            // Here you define the url of your paginated API
            resource_url: "/Tender/NotificationStatusReportPagingAsync?tenderId=" + tenderId + "&tenderName=" + tenderName,
            queryString: ''
         },
         created: function () {
            this.getDropDownListData();
         },
         methods: {
            updateResource: function (data) {
               this.notifications = data;
               this.totalCount = this.$refs.vpaginator.totalCount;
               this.currentPage = this.$refs.vpaginator.currentPage;
               this.pageSize = this.$refs.vpaginator.pageSize;
            },
            getDropDownListData: function () {
               $.get('/Tender/GetAllOperationCodes').done(function (result) {

                  Tender.operationCodeList = result;
                  setTimeout(function () {
                     $('#operationCode').selectpicker('refresh');
                  }, 1000);
               }).fail(function (error) {
                  console.log(error.statusText);
               });
               $.get('/Tender/GetAllNotificationStatus').done(function (result) {
                  Tender.notificationStatusList = result;
                  setTimeout(function () {
                     $('#SendingStatusId').selectpicker('refresh');
                  }, 1000);
               }).fail(function (error) {
                  console.log(error.statusText);
               });
            },
            search: function () {
               this.queryString = $('#notificationGrid').serialize();
               this.resource_url = '/Tender/NotificationStatusReportPagingAsync?' + this.queryString + '&tenderId=' + tenderId;
            },
            emptysearch: function () {
               this.selectedOperationCode = '';
               $("#Email").val("");
               $("#SendingStatusId").val("");
               $("#operationCode").val("");
               $("#SendingStatusId").selectpicker('refresh');
               $("#operationCode").selectpicker('refresh');
               this.queryString = $('#notificationGrid').serialize();
               this.resource_url = '/Tender/NotificationStatusReportPagingAsync?' + this.queryString + '&tenderId=' + tenderId;
            }
         }
      });
      function exportToExcel() {
         var table = $('#notificationTable').clone();
         table.find('tr').each(function (i, row) {
         });
         var wb = XLSX.utils.table_to_book(table[0], { sheet: "Suppliers" });
         return XLSX.writeFile(wb, ('DailyNotificationsListReport.xlsx'));
      }
   </script>
}
