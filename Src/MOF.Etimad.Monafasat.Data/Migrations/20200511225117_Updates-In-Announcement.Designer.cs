// <auto-generated />
using System;
using MOF.Etimad.Monafasat.Data;
using MOF.Etimad.Monafasat.SharedKernel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MOF.Etimad.Monafasat.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200511225117_Updates-In-Announcement")]
    partial class UpdatesInAnnouncement
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditType")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("NewData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TableSchema")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("_AuditLog");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.BillStatus", b =>
                {
                    b.Property<int>("BillStatusId")
                        .HasColumnType("int");

                    b.Property<string>("BillStatusNameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("BillStatusNameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("BillStatusId");

                    b.ToTable("BillStatus","LookUps");

                    b.HasData(
                        new
                        {
                            BillStatusId = 1,
                            BillStatusNameAr = "جديد"
                        },
                        new
                        {
                            BillStatusId = 2,
                            BillStatusNameAr = "تحت الإجراء"
                        },
                        new
                        {
                            BillStatusId = 3,
                            BillStatusNameAr = "تم اصدار رقم سداد"
                        },
                        new
                        {
                            BillStatusId = 4,
                            BillStatusNameAr = "تم الشراء"
                        },
                        new
                        {
                            BillStatusId = 5,
                            BillStatusNameAr = "تم الرفض"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.BlockStatus", b =>
                {
                    b.Property<int>("BlockStatusId")
                        .HasColumnType("int");

                    b.Property<string>("BlockStatusName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("BlockStatusNameAr")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("BlockStatusId");

                    b.ToTable("BlockStatus","LookUps");

                    b.HasData(
                        new
                        {
                            BlockStatusId = 1,
                            BlockStatusName = "NewAdmin"
                        },
                        new
                        {
                            BlockStatusId = 2,
                            BlockStatusName = "NewSecretary",
                            BlockStatusNameAr = "بانتظار الارسال الى اعتماد مدير لجنه المنع"
                        },
                        new
                        {
                            BlockStatusId = 3,
                            BlockStatusName = "ApprovedSecertary",
                            BlockStatusNameAr = "بانتظار اعتماد مدير لجنه المنع"
                        },
                        new
                        {
                            BlockStatusId = 4,
                            BlockStatusName = "RejectedSecertary",
                            BlockStatusNameAr = "تم الرفض من قبل سكرتير لجنه المنع"
                        },
                        new
                        {
                            BlockStatusId = 5,
                            BlockStatusName = "ApprovedManager",
                            BlockStatusNameAr = "تم الاعتماد من قبل مدير لجنه المنع"
                        },
                        new
                        {
                            BlockStatusId = 6,
                            BlockStatusName = "RejectedManager",
                            BlockStatusNameAr = "تم الرفض من قبل مدير لجنه المنع"
                        },
                        new
                        {
                            BlockStatusId = 7,
                            BlockStatusName = "RemoveBlock",
                            BlockStatusNameAr = "تم إزالة المنع"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.BlockType", b =>
                {
                    b.Property<int>("BlockTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("BlockTypeId");

                    b.ToTable("BlockType","LookUps");

                    b.HasData(
                        new
                        {
                            BlockTypeId = 1
                        },
                        new
                        {
                            BlockTypeId = 2
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("ActivitytemplateID")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("ActivitytemplateID");

                    b.HasIndex("ParentID");

                    b.ToTable("Activity","LookUps");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ActivityTemplate", b =>
                {
                    b.Property<int>("ActivitytemplatId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasYears")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("ActivitytemplatId");

                    b.ToTable("Activitytemplate","LookUps");

                    b.HasData(
                        new
                        {
                            ActivitytemplatId = 1,
                            NameAr = "عام"
                        },
                        new
                        {
                            ActivitytemplatId = 2,
                            NameAr = "إنشاء الطرق "
                        },
                        new
                        {
                            ActivitytemplatId = 3,
                            NameAr = "انشاء مباني"
                        },
                        new
                        {
                            ActivitytemplatId = 4,
                            NameAr = "الصيانة والتشغيل"
                        },
                        new
                        {
                            ActivitytemplatId = 5,
                            NameAr = "الصيانة الطبية "
                        },
                        new
                        {
                            ActivitytemplatId = 6,
                            NameAr = "المستلزمات الطبية"
                        },
                        new
                        {
                            ActivitytemplatId = 7,
                            NameAr = "التغذية "
                        },
                        new
                        {
                            ActivitytemplatId = 8,
                            NameAr = " الادوية"
                        },
                        new
                        {
                            ActivitytemplatId = 9,
                            NameAr = "تقنية المعلومات"
                        },
                        new
                        {
                            ActivitytemplatId = 10,
                            NameAr = "الخدمات الهندسية (تصميم)"
                        },
                        new
                        {
                            ActivitytemplatId = 11,
                            NameAr = "نظافة المدن"
                        },
                        new
                        {
                            ActivitytemplatId = 12,
                            NameAr = "الخدمات الاستشارية"
                        },
                        new
                        {
                            ActivitytemplatId = 13,
                            NameAr = "المستلزمات العامة(التوريد)"
                        },
                        new
                        {
                            ActivitytemplatId = 14,
                            NameAr = "الخدمات الهندسية (اشراف, )"
                        },
                        new
                        {
                            ActivitytemplatId = 15,
                            NameAr = "جداول البيانات"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressName")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("BranchId");

                    b.ToTable("Address","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressType","LookUps");

                    b.HasData(
                        new
                        {
                            AddressTypeId = 1,
                            AddressTypeName = "العنوان الرئيسي"
                        },
                        new
                        {
                            AddressTypeId = 2,
                            AddressTypeName = "عناوين تسليم العينات"
                        },
                        new
                        {
                            AddressTypeId = 3,
                            AddressTypeName = "عناوين فتح العروض"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AgencyBudgetNumber", b =>
                {
                    b.Property<int>("AgencyBudgetNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cache")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsProject")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("AgencyBudgetNumberId");

                    b.HasIndex("TenderId");

                    b.ToTable("AgencyBudgetNumber","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationPlaintStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("AgencyCommunicationPlaintStatus","LookUps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "تم الإرسال"
                        },
                        new
                        {
                            Id = 2,
                            Name = "بانتظار الاعتماد"
                        },
                        new
                        {
                            Id = 3,
                            Name = "مقبول"
                        },
                        new
                        {
                            Id = 4,
                            Name = "مرفوض"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequest", b =>
                {
                    b.Property<int>("AgencyRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyRequestTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EscalationAcceptanceStatusId")
                        .HasColumnType("int");

                    b.Property<string>("EscalationRejectionReason")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("EscalationStatusId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<int?>("PlaintAcceptanceStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("RequestedByRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierExtendOfferDatesRequestId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<int?>("TenderPlaintRequestProcedureId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("AgencyRequestId");

                    b.HasIndex("AgencyRequestTypeId");

                    b.HasIndex("EscalationAcceptanceStatusId");

                    b.HasIndex("EscalationStatusId");

                    b.HasIndex("PlaintAcceptanceStatusId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierExtendOfferDatesRequestId");

                    b.HasIndex("TenderId");

                    b.HasIndex("TenderPlaintRequestProcedureId");

                    b.ToTable("AgencyCommunicationRequest","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("AgencyCommunicationRequestStatus","LookUps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "تحت التحديث"
                        },
                        new
                        {
                            Id = 2,
                            Name = "بإنتظار إعتماد الطلب"
                        },
                        new
                        {
                            Id = 3,
                            Name = "تم الإعتماد"
                        },
                        new
                        {
                            Id = 4,
                            Name = "تم رفض إعتماد الطلب "
                        },
                        new
                        {
                            Id = 5,
                            Name = "بإنتظار اعتماد مدير التظلم "
                        },
                        new
                        {
                            Id = 6,
                            Name = "معتمدة من مدير التظلم "
                        },
                        new
                        {
                            Id = 7,
                            Name = " مرفوضة من مدير التظلم"
                        },
                        new
                        {
                            Id = 8,
                            Name = "تم إرسال الطلب"
                        },
                        new
                        {
                            Id = 9,
                            Name = "تم إرسال إستفسار وبإنتظار الرد"
                        },
                        new
                        {
                            Id = 10,
                            Name = "تم الرد على الإستفسار"
                        },
                        new
                        {
                            Id = 11,
                            Name = "منتهية"
                        },
                        new
                        {
                            Id = 12,
                            Name = "تحت المراجعة"
                        },
                        new
                        {
                            Id = 13,
                            Name = "تم تمديد تواريخ المنافسة"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequestType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("AgencyCommunicationRequestType","LookUps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "تظلم"
                        },
                        new
                        {
                            Id = 2,
                            Name = "تفاوض"
                        },
                        new
                        {
                            Id = 3,
                            Name = "طلب تأجيل تقديم العروض"
                        },
                        new
                        {
                            Id = 4,
                            Name = "طلب تمديد سريان العروض"
                        },
                        new
                        {
                            Id = 5,
                            Name = "إستفسار"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AgreementType", b =>
                {
                    b.Property<int>("AgreementTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("AgreementTypeId");

                    b.ToTable("AgreementType","LookUps");

                    b.HasData(
                        new
                        {
                            AgreementTypeId = 1,
                            NameAr = "مغلقة"
                        },
                        new
                        {
                            AgreementTypeId = 2,
                            NameAr = "مفتوحة"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityDescription")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("AnnouncementName")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("AnnouncementPeriod")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(5000);

                    b.Property<bool>("InsidKsa")
                        .HasColumnType("bit");

                    b.Property<string>("IntroAboutTender")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(5000);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReasonForSelectingTenderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TenderTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("AnnouncementId");

                    b.HasIndex("AgencyCode");

                    b.HasIndex("BranchId");

                    b.HasIndex("ReasonForSelectingTenderTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TenderTypeId");

                    b.ToTable("Announcement","Announcement");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementActivity", b =>
                {
                    b.Property<int>("AnnouncementActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("AnnouncementActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementActivity","Announcement");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("AreaId");

                    b.ToTable("AnnouncementArea","Announcement");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementConstructionWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionWorkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("ConstructionWorkId");

                    b.ToTable("AnnouncementConstructionWork","Announcement");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("CountryId");

                    b.ToTable("AnnouncementCountry","Announcement");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("StatusId");

                    b.ToTable("AnnouncementHistory","Announcement");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementMaintenanceRunnigWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaintenanceRunningWorkId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("MaintenanceRunningWorkId");

                    b.ToTable("AnnouncementMaintenanceRunnigWork","Announcement");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("AnnouncementStatus","Announcement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "تحت الإنشاء"
                        },
                        new
                        {
                            Id = 2,
                            Name = "بإنتظار الإعتماد"
                        },
                        new
                        {
                            Id = 3,
                            Name = "معتمد"
                        },
                        new
                        {
                            Id = 4,
                            Name = "منهي"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("AreaId");

                    b.ToTable("Area","LookUps");

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            NameAr = "منطقة الرياض",
                            NameEn = "Riyadh"
                        },
                        new
                        {
                            AreaId = 2,
                            NameAr = "منطقة مكة المكرمة",
                            NameEn = "Mekkah"
                        },
                        new
                        {
                            AreaId = 3,
                            NameAr = "منطقة المدينة المنورة ",
                            NameEn = "Maddinah"
                        },
                        new
                        {
                            AreaId = 4,
                            NameAr = "منطقة القصيم ",
                            NameEn = "Quaseem"
                        },
                        new
                        {
                            AreaId = 5,
                            NameAr = "المنطقة الشرقية",
                            NameEn = "Sharkia"
                        },
                        new
                        {
                            AreaId = 6,
                            NameAr = "منطقة عسير",
                            NameEn = "Asir"
                        },
                        new
                        {
                            AreaId = 7,
                            NameAr = "منطقة تبوك",
                            NameEn = "Tabuk"
                        },
                        new
                        {
                            AreaId = 8,
                            NameAr = "منطقة حائل",
                            NameEn = "Hail"
                        },
                        new
                        {
                            AreaId = 9,
                            NameAr = "منطقة الحدود الشمالية",
                            NameEn = "North Borders"
                        },
                        new
                        {
                            AreaId = 10,
                            NameAr = "منطقة جازان",
                            NameEn = "Jazan"
                        },
                        new
                        {
                            AreaId = 11,
                            NameAr = "منطقة نجران",
                            NameEn = "Najran"
                        },
                        new
                        {
                            AreaId = 12,
                            NameAr = "منطقة الباحة",
                            NameEn = "Bahah"
                        },
                        new
                        {
                            AreaId = 13,
                            NameAr = "منطقة الجوف",
                            NameEn = "Jof"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AttachmentType", b =>
                {
                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("AttachmentTypeId");

                    b.ToTable("AttachmentType","LookUps");

                    b.HasData(
                        new
                        {
                            AttachmentTypeId = 1,
                            NameAr = "Tender Booklet"
                        },
                        new
                        {
                            AttachmentTypeId = 2,
                            NameAr = "QuantityTableAttachment"
                        },
                        new
                        {
                            AttachmentTypeId = 3,
                            NameAr = "Offer File"
                        },
                        new
                        {
                            AttachmentTypeId = 4,
                            NameAr = "Guarantee Letter"
                        },
                        new
                        {
                            AttachmentTypeId = 5,
                            NameAr = "Tender Purchase Envoice"
                        },
                        new
                        {
                            AttachmentTypeId = 6,
                            NameAr = "Certificate Of Visitation"
                        },
                        new
                        {
                            AttachmentTypeId = 7,
                            NameAr = "Classification Certificate"
                        },
                        new
                        {
                            AttachmentTypeId = 8,
                            NameAr = "VAT Certificate"
                        },
                        new
                        {
                            AttachmentTypeId = 9,
                            NameAr = "Social insurance certificate"
                        },
                        new
                        {
                            AttachmentTypeId = 10,
                            NameAr = "Saudization Certificate"
                        },
                        new
                        {
                            AttachmentTypeId = 11,
                            NameAr = "Commercial Register"
                        },
                        new
                        {
                            AttachmentTypeId = 12,
                            NameAr = "Chamber of Commerce Certificate"
                        },
                        new
                        {
                            AttachmentTypeId = 13,
                            NameAr = "Offer Letter"
                        },
                        new
                        {
                            AttachmentTypeId = 14,
                            NameAr = "Offer Copy"
                        },
                        new
                        {
                            AttachmentTypeId = 15,
                            NameAr = "SupplierOriginalAttachment"
                        },
                        new
                        {
                            AttachmentTypeId = 16,
                            NameAr = "Tender File"
                        },
                        new
                        {
                            AttachmentTypeId = 17,
                            NameAr = "Supplier Combined Attachment"
                        },
                        new
                        {
                            AttachmentTypeId = 18,
                            NameAr = "Supplier Financial Proposal Attachment"
                        },
                        new
                        {
                            AttachmentTypeId = 19,
                            NameAr = "Supplier Technical Proposal Attachment"
                        },
                        new
                        {
                            AttachmentTypeId = 20,
                            NameAr = "Plain Request"
                        },
                        new
                        {
                            AttachmentTypeId = 21,
                            NameAr = "First Stage Negotiation Letter"
                        },
                        new
                        {
                            AttachmentTypeId = 22,
                            NameAr = "Initial Guarantee"
                        },
                        new
                        {
                            AttachmentTypeId = 23,
                            NameAr = "Unit Modifications Attachments To Data Entry"
                        },
                        new
                        {
                            AttachmentTypeId = 24,
                            NameAr = "Negotiation"
                        },
                        new
                        {
                            AttachmentTypeId = 25,
                            NameAr = "Escalation"
                        },
                        new
                        {
                            AttachmentTypeId = 26,
                            NameAr = "TechnicianReport"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("BankId");

                    b.ToTable("Bank","LookUps");

                    b.HasData(
                        new
                        {
                            BankId = 1,
                            NameAr = "البنك الأهلي التجاري",
                            NameEn = "The National Commercial Bank"
                        },
                        new
                        {
                            BankId = 2,
                            NameAr = "البنك السعودي البريطاني",
                            NameEn = "The Saudi British Bank"
                        },
                        new
                        {
                            BankId = 3,
                            NameAr = "البنك السعودي الفرنسي",
                            NameEn = "Banque Saudi Fransi"
                        },
                        new
                        {
                            BankId = 4,
                            NameAr = "البنك الأول",
                            NameEn = "Alawwal Bank"
                        },
                        new
                        {
                            BankId = 5,
                            NameAr = "البنك السعودي للاستثمار",
                            NameEn = "Saudi Investment Bank"
                        },
                        new
                        {
                            BankId = 6,
                            NameAr = "البنك العربي الوطني",
                            NameEn = "Arab National Bank"
                        },
                        new
                        {
                            BankId = 7,
                            NameAr = "بنك البلاد",
                            NameEn = "Bank AlBilad"
                        },
                        new
                        {
                            BankId = 8,
                            NameAr = "بنك الجزيرة",
                            NameEn = "Bank AlJazira"
                        },
                        new
                        {
                            BankId = 9,
                            NameAr = "بنك الرياض",
                            NameEn = "Riyad Bank"
                        },
                        new
                        {
                            BankId = 10,
                            NameAr = "مجموعة سامبا المالية (سامبا)",
                            NameEn = "Samba Financial Group (Samba)"
                        },
                        new
                        {
                            BankId = 11,
                            NameAr = "مصرف الراجحي",
                            NameEn = "Al Rajhi Bank"
                        },
                        new
                        {
                            BankId = 12,
                            NameAr = "مصرف الإنماء",
                            NameEn = "alinma bank"
                        },
                        new
                        {
                            BankId = 13,
                            NameAr = "بنك الخليج الدولي",
                            NameEn = "Gulf International Bank"
                        },
                        new
                        {
                            BankId = 14,
                            NameAr = "بنك الإمارات دبي الوطني",
                            NameEn = "Emirates NBD"
                        },
                        new
                        {
                            BankId = 15,
                            NameAr = "بنك البحرين الوطني",
                            NameEn = "National Bank of Bahrain"
                        },
                        new
                        {
                            BankId = 16,
                            NameAr = "بنك الكويت الوطني",
                            NameEn = "National Bank of Kuwait"
                        },
                        new
                        {
                            BankId = 17,
                            NameAr = "بنك مسقط",
                            NameEn = "BankMuscat"
                        },
                        new
                        {
                            BankId = 18,
                            NameAr = "دويتشه بنك",
                            NameEn = "Deutsche Bank"
                        },
                        new
                        {
                            BankId = 19,
                            NameAr = "بي إن بي باريبا",
                            NameEn = "BNP Paribas"
                        },
                        new
                        {
                            BankId = 20,
                            NameAr = "جي بي مورقان تشيز إن أيه",
                            NameEn = "JPMorgan Chase & Co"
                        },
                        new
                        {
                            BankId = 21,
                            NameAr = "بنك باكستان الوطني",
                            NameEn = "National Bank of Pakistan"
                        },
                        new
                        {
                            BankId = 22,
                            NameAr = "ستيت بنك أوف إنديا",
                            NameEn = "State Bank of India Bahrain"
                        },
                        new
                        {
                            BankId = 23,
                            NameAr = "بنك تي سي زراعات بانكاسي",
                            NameEn = "Ziraat Bankası"
                        },
                        new
                        {
                            BankId = 24,
                            NameAr = "بنك الصين للصناعة والتجارة",
                            NameEn = "ICBC China"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BaseNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CR")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotifacationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("NotifayByType")
                        .HasColumnType("int");

                    b.Property<int?>("NotificationSettingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("sendAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CR");

                    b.HasIndex("NotifacationStatusId");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification","Notification");

                    b.HasDiscriminator<int>("NotifayByType");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BiddingRound", b =>
                {
                    b.Property<int>("BiddingRoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BiddingRoundStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("BiddingRoundId");

                    b.HasIndex("BiddingRoundStatusId");

                    b.HasIndex("TenderId");

                    b.ToTable("BiddingRounds","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BiddingRoundOffer", b =>
                {
                    b.Property<int>("BiddingRoundOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BiddingRoundId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<decimal>("OfferValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("BiddingRoundOfferId");

                    b.HasIndex("BiddingRoundId");

                    b.HasIndex("OfferId");

                    b.ToTable("BiddingRoundOffer","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BiddingRoundStatus", b =>
                {
                    b.Property<int>("BiddingRoundStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("BiddingRoundStatusId");

                    b.ToTable("BiddingRoundStatus","LookUps");

                    b.HasData(
                        new
                        {
                            BiddingRoundStatusId = 1,
                            Name = "بدأت الجولة"
                        },
                        new
                        {
                            BiddingRoundStatusId = 2,
                            Name = "توقفت الجولة"
                        },
                        new
                        {
                            BiddingRoundStatusId = 3,
                            Name = "تم اعتماد الجولة"
                        },
                        new
                        {
                            BiddingRoundStatusId = 4,
                            Name = "جولة جديدة"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BillInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActionStatus")
                        .HasColumnType("int");

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("numeric(15, 2)");

                    b.Property<string>("BankBranchId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankPaymentId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankReversalTransactionID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BenChapterNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BenSectionNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BenSequenceNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BenSubDepartmentsCount")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BenSubSectionsCount")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BillInvoiceNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BillReferenceInfo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("BillStatusId")
                        .HasColumnType("int");

                    b.Property<string>("BillingAccount")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ConditionsBookletID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal?>("CurrnetAmount")
                        .HasColumnType("money");

                    b.Property<string>("DisplayLabelAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DisplayLabelEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntermediatePaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvitationId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("POINumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("POIType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentChannel")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentReferencefInfo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PaymentStatusCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SadadBatchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SadadPaymentTranactionId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BillStatusId");

                    b.HasIndex("ConditionsBookletID")
                        .IsUnique()
                        .HasFilter("[ConditionsBookletID] IS NOT NULL");

                    b.HasIndex("InvitationId")
                        .IsUnique()
                        .HasFilter("[InvitationId] IS NOT NULL");

                    b.ToTable("BillInfo","Sadad");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BillPaymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("numeric(15, 2)");

                    b.Property<int?>("BillInfoId")
                        .HasColumnType("int");

                    b.Property<string>("BillInvoiceNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("FeesTypeId")
                        .HasColumnType("int");

                    b.Property<string>("GFSCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BillInfoId");

                    b.HasIndex("FeesTypeId");

                    b.ToTable("BillPaymentDetails","Sadad");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("BranchId");

                    b.HasIndex("AgencyCode");

                    b.ToTable("Branch","Branch");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BranchAddress", b =>
                {
                    b.Property<int>("BranchAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("AddressName")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CityCode")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Fax2")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("BranchAddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchAddresse","Branch");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BranchCommittee", b =>
                {
                    b.Property<int>("BranchCommitteeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CommitteeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("BranchCommitteeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CommitteeId");

                    b.ToTable("BranchCommittee","Branch");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BranchUser", b =>
                {
                    b.Property<int>("BranchUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal?>("EstimatedValueFrom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EstimatedValueTo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RelatedAgencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("BranchUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("BranchUser","Branch");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ChangeRequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("ChangeRequestStatus","LookUps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAr = "جديدة"
                        },
                        new
                        {
                            Id = 2,
                            NameAr = "بانتظار الاعتماد"
                        },
                        new
                        {
                            Id = 3,
                            NameAr = "معتمدة"
                        },
                        new
                        {
                            Id = 4,
                            NameAr = "مرفوضة"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ChangeRequestType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("ChangeRequestType","LookUps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAr = "تمديد التواريخ"
                        },
                        new
                        {
                            Id = 2,
                            NameAr = "جداول الكميات"
                        },
                        new
                        {
                            Id = 3,
                            NameAr = "الملحقات"
                        },
                        new
                        {
                            Id = 4,
                            NameAr = "إلغاء"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.City", b =>
                {
                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CityID");

                    b.ToTable("City","Lookups");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Committee", b =>
                {
                    b.Property<int>("CommitteeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CommitteeName")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("CommitteeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("CommitteeId");

                    b.HasIndex("AgencyCode");

                    b.HasIndex("CommitteeTypeId");

                    b.ToTable("Committee","Committee");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.CommitteeType", b =>
                {
                    b.Property<int>("CommitteeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("CommitteeTypeId");

                    b.ToTable("CommitteeType","LookUps");

                    b.HasData(
                        new
                        {
                            CommitteeTypeId = 1,
                            NameAr = "لجنة فنية"
                        },
                        new
                        {
                            CommitteeTypeId = 2,
                            NameAr = "لجنة فتح العروض"
                        },
                        new
                        {
                            CommitteeTypeId = 3,
                            NameAr = "لجنة فحص العروض"
                        },
                        new
                        {
                            CommitteeTypeId = 4,
                            NameAr = "لجنة المنع"
                        },
                        new
                        {
                            CommitteeTypeId = 5,
                            NameAr = "لجنة الشراء"
                        },
                        new
                        {
                            CommitteeTypeId = 6,
                            NameAr = "لجنة التأهيل المسبق"
                        },
                        new
                        {
                            CommitteeTypeId = 7,
                            NameAr = "لجنة فتح وفحص العروض(مكتب تحقيق الرؤية)"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.CommitteeUser", b =>
                {
                    b.Property<int>("CommitteeUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommitteeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RelatedAgencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("CommitteeUserId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("CommitteeUser","Committee");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ConditionTemplateActivities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionsTemplateSectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ActivityTemplateId");

                    b.HasIndex("ConditionsTemplateSectionId");

                    b.ToTable("ConditionTemplateActivities","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ConditionsBooklet", b =>
                {
                    b.Property<int>("ConditionsBookletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommericalRegisterNo")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("ConditionsBookletId");

                    b.HasIndex("CommericalRegisterNo");

                    b.HasIndex("TenderId");

                    b.ToTable("ConditionsBooklet","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ConditionsTemplateCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CerificateId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionsTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CerificateId");

                    b.HasIndex("ConditionsTemplateId");

                    b.ToTable("ConditionsTemplateCertificate","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ConditionsTemplateSection", b =>
                {
                    b.Property<int>("ConditionsTemplateSectionId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("ConditionsTemplateSectionId");

                    b.ToTable("ConditionsTemplateSections","LookUps");

                    b.HasData(
                        new
                        {
                            ConditionsTemplateSectionId = 1,
                            NameAr = "القوى العاملة"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 2,
                            NameAr = "المواد"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 3,
                            NameAr = "المعدات"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 4,
                            NameAr = "المواد متقدم"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 5,
                            NameAr = "المعدات متقدم"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 6,
                            NameAr = "طريقة التنفيذ"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 7,
                            NameAr = "تفاصيل الامات"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 8,
                            NameAr = "تفاصيل الجودة"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 9,
                            NameAr = "العقود بناءا على الاداء"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 10,
                            NameAr = "التعريفات الفنية"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 11,
                            NameAr = "نطاق عمل المشروع"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 12,
                            NameAr = "برنامج العمل"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 13,
                            NameAr = " موقع العمل"
                        },
                        new
                        {
                            ConditionsTemplateSectionId = 14,
                            NameAr = "المخرجات"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ConstructionWork", b =>
                {
                    b.Property<int>("ConstructionWorkId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ConstructionWorkId");

                    b.HasIndex("ParentID");

                    b.ToTable("ConstructionWork","LookUps");

                    b.HasData(
                        new
                        {
                            ConstructionWorkId = 1,
                            NameAr = " حفر االبار "
                        },
                        new
                        {
                            ConstructionWorkId = 2,
                            NameAr = "تشجيــر الحدائق وتنظيم المواقـع"
                        },
                        new
                        {
                            ConstructionWorkId = 3,
                            NameAr = "الأعمال اإللكترونيــة"
                        },
                        new
                        {
                            ConstructionWorkId = 4,
                            NameAr = " الســـــدود"
                        },
                        new
                        {
                            ConstructionWorkId = 5,
                            NameAr = "المســـالـخ"
                        },
                        new
                        {
                            ConstructionWorkId = 6,
                            NameAr = "الأعمال البحــريـة"
                        },
                        new
                        {
                            ConstructionWorkId = 7,
                            NameAr = " الطــــرق"
                        },
                        new
                        {
                            ConstructionWorkId = 8,
                            NameAr = " األعمــال الميكانيكيـة"
                        },
                        new
                        {
                            ConstructionWorkId = 9,
                            NameAr = " الأعمال الصنــاعية"
                        },
                        new
                        {
                            ConstructionWorkId = 10,
                            NameAr = " المبـــاني"
                        },
                        new
                        {
                            ConstructionWorkId = 11,
                            NameAr = " الأعمال الكهربائيـة"
                        },
                        new
                        {
                            ConstructionWorkId = 12,
                            NameAr = " أعمال المياه والصرف الصحي"
                        },
                        new
                        {
                            ConstructionWorkId = 13,
                            NameAr = "تقنية الإتصالات"
                        },
                        new
                        {
                            ConstructionWorkId = 14,
                            NameAr = "آبار أنبوبية",
                            ParentID = 1
                        },
                        new
                        {
                            ConstructionWorkId = 15,
                            NameAr = "حفــر اآلبـــار",
                            ParentID = 1
                        },
                        new
                        {
                            ConstructionWorkId = 16,
                            NameAr = "آبار يدوية",
                            ParentID = 1
                        },
                        new
                        {
                            ConstructionWorkId = 17,
                            NameAr = "الحـــدائق",
                            ParentID = 2
                        },
                        new
                        {
                            ConstructionWorkId = 18,
                            NameAr = "تنظيــم المواقــع",
                            ParentID = 2
                        },
                        new
                        {
                            ConstructionWorkId = 19,
                            NameAr = "شبكات الري للحدائق",
                            ParentID = 2
                        },
                        new
                        {
                            ConstructionWorkId = 20,
                            NameAr = "تشجيــر الحدائق وتنظيم المواقـع",
                            ParentID = 2
                        },
                        new
                        {
                            ConstructionWorkId = 21,
                            NameAr = "المنتزهـات العـامة",
                            ParentID = 2
                        },
                        new
                        {
                            ConstructionWorkId = 22,
                            NameAr = "تشجير الشــوارع",
                            ParentID = 2
                        },
                        new
                        {
                            ConstructionWorkId = 23,
                            NameAr = "توريد وتركيب أجهزة ومعدات الحاسب اآللي (حاسبات وشبكات وملحقات},",
                            ParentID = 3
                        },
                        new
                        {
                            ConstructionWorkId = 24,
                            NameAr = "المعدات اإللكترونية الطبية / المختبرية",
                            ParentID = 3
                        },
                        new
                        {
                            ConstructionWorkId = 25,
                            NameAr = " نظام التحكم بسير اإلنتاج",
                            ParentID = 3
                        },
                        new
                        {
                            ConstructionWorkId = 26,
                            NameAr = "نظام اإلرسال المرئي والصوتي",
                            ParentID = 3
                        },
                        new
                        {
                            ConstructionWorkId = 27,
                            NameAr = "الأعمال اإللكترونيــة",
                            ParentID = 3
                        },
                        new
                        {
                            ConstructionWorkId = 28,
                            NameAr = "معدات استوديوهات المرئيات والسمعيات",
                            ParentID = 3
                        },
                        new
                        {
                            ConstructionWorkId = 29,
                            NameAr = "نظام المراقبة واألمن والسالمة",
                            ParentID = 3
                        },
                        new
                        {
                            ConstructionWorkId = 30,
                            NameAr = "الســـــدود",
                            ParentID = 4
                        },
                        new
                        {
                            ConstructionWorkId = 31,
                            NameAr = "الســــدود الخرسانية",
                            ParentID = 4
                        },
                        new
                        {
                            ConstructionWorkId = 32,
                            NameAr = "الســــدود الترابية",
                            ParentID = 4
                        },
                        new
                        {
                            ConstructionWorkId = 33,
                            NameAr = "المسالخ",
                            ParentID = 5
                        },
                        new
                        {
                            ConstructionWorkId = 34,
                            NameAr = " مســالخ عـاديـة",
                            ParentID = 5
                        },
                        new
                        {
                            ConstructionWorkId = 35,
                            NameAr = "مســالخ آليـة",
                            ParentID = 5
                        },
                        new
                        {
                            ConstructionWorkId = 36,
                            NameAr = "حفر ودق الركائز",
                            ParentID = 6
                        },
                        new
                        {
                            ConstructionWorkId = 37,
                            NameAr = " الحواجـز / الجسور / الطرق البحرية",
                            ParentID = 6
                        },
                        new
                        {
                            ConstructionWorkId = 38,
                            NameAr = " أحواض إصالح السفن",
                            ParentID = 6
                        },
                        new
                        {
                            ConstructionWorkId = 39,
                            NameAr = " الأعمال البحــريـة",
                            ParentID = 6
                        },
                        new
                        {
                            ConstructionWorkId = 40,
                            NameAr = "األنفاق تحت المـاء"
                        },
                        new
                        {
                            ConstructionWorkId = 41,
                            NameAr = "األرصفة البحـرية",
                            ParentID = 6
                        },
                        new
                        {
                            ConstructionWorkId = 42,
                            NameAr = "التمديدات تحت المـاء"
                        },
                        new
                        {
                            ConstructionWorkId = 43,
                            NameAr = "المـراسي",
                            ParentID = 6
                        },
                        new
                        {
                            ConstructionWorkId = 44,
                            NameAr = " أعمال التعميق والتنظيف",
                            ParentID = 6
                        },
                        new
                        {
                            ConstructionWorkId = 45,
                            NameAr = "الطــــرق",
                            ParentID = 7
                        },
                        new
                        {
                            ConstructionWorkId = 46,
                            NameAr = "السكك الحديدية",
                            ParentID = 7
                        },
                        new
                        {
                            ConstructionWorkId = 47,
                            NameAr = "السفلته",
                            ParentID = 7
                        },
                        new
                        {
                            ConstructionWorkId = 48,
                            NameAr = " الأعمال الترابية إلنشاء الطرق وتشمل },الردم والتسوية والدك(",
                            ParentID = 7
                        },
                        new
                        {
                            ConstructionWorkId = 49,
                            NameAr = "مدارج الطائرات",
                            ParentID = 7
                        },
                        new
                        {
                            ConstructionWorkId = 50,
                            NameAr = "الجسور",
                            ParentID = 7
                        },
                        new
                        {
                            ConstructionWorkId = 51,
                            NameAr = "األنفاق",
                            ParentID = 7
                        },
                        new
                        {
                            ConstructionWorkId = 52,
                            NameAr = " صـوامـع الغــالل",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 53,
                            NameAr = "نظـام التسخين الميكانيكي",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 54,
                            NameAr = "محطات تنقية المياه محطات تنقية الصرف الصحي",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 55,
                            NameAr = " التوربينات / الغاليات البخـارية",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 56,
                            NameAr = "محطات ضخ المياه والصرف الصحي",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 57,
                            NameAr = "األعمــال الميكانيكيـة",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 58,
                            NameAr = "محطـات توليد الطاقـة",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 59,
                            NameAr = "نظــام التهـوية",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 60,
                            NameAr = " نظام التكييف المركزي",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 61,
                            NameAr = "شبكات النقل بالهواء المضغوط"
                        },
                        new
                        {
                            ConstructionWorkId = 62,
                            NameAr = "شبكات مداولة الشحنات السـائبة",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 63,
                            NameAr = "المصـاعد / السـاللم المتحركة",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 64,
                            NameAr = " أرصفة الحاويات",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 65,
                            NameAr = "نظمة مكافحة الحرق",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 66,
                            NameAr = " نظام السيور الناقلــة",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 67,
                            NameAr = " نظام التــبريد",
                            ParentID = 8
                        },
                        new
                        {
                            ConstructionWorkId = 69,
                            NameAr = "حاويات الغاز",
                            ParentID = 9
                        },
                        new
                        {
                            ConstructionWorkId = 70,
                            NameAr = "أحزاض بناء وإصالح السفن",
                            ParentID = 9
                        },
                        new
                        {
                            ConstructionWorkId = 71,
                            NameAr = "الصوامع",
                            ParentID = 9
                        },
                        new
                        {
                            ConstructionWorkId = 72,
                            NameAr = "المصانع",
                            ParentID = 9
                        },
                        new
                        {
                            ConstructionWorkId = 73,
                            NameAr = "محارق النفايات",
                            ParentID = 9
                        },
                        new
                        {
                            ConstructionWorkId = 74,
                            NameAr = "الأعمال الصنــاعية",
                            ParentID = 9
                        },
                        new
                        {
                            ConstructionWorkId = 75,
                            NameAr = "مطاحن الدقيق",
                            ParentID = 9
                        },
                        new
                        {
                            ConstructionWorkId = 76,
                            NameAr = " شبكات أنابيب البترول والغاز",
                            ParentID = 9
                        },
                        new
                        {
                            ConstructionWorkId = 77,
                            NameAr = "المناجم والصناعات التعدينية",
                            ParentID = 9
                        },
                        new
                        {
                            ConstructionWorkId = 78,
                            NameAr = " محطات تحلية المياه",
                            ParentID = 9
                        },
                        new
                        {
                            ConstructionWorkId = 79,
                            NameAr = " المباني الفوالذية }, الحديدية (",
                            ParentID = 10
                        },
                        new
                        {
                            ConstructionWorkId = 80,
                            NameAr = "المباني سابقة الصب",
                            ParentID = 10
                        },
                        new
                        {
                            ConstructionWorkId = 81,
                            NameAr = "المباني الخرسانية",
                            ParentID = 10
                        },
                        new
                        {
                            ConstructionWorkId = 82,
                            NameAr = "المبـــاني",
                            ParentID = 10
                        },
                        new
                        {
                            ConstructionWorkId = 83,
                            NameAr = "محطات توليد الطــاقة",
                            ParentID = 11
                        },
                        new
                        {
                            ConstructionWorkId = 84,
                            NameAr = "إدارة الشوارع",
                            ParentID = 11
                        },
                        new
                        {
                            ConstructionWorkId = 85,
                            NameAr = "محطات الطاقة الشمسية",
                            ParentID = 11
                        },
                        new
                        {
                            ConstructionWorkId = 86,
                            NameAr = " الحماية الكاثودية",
                            ParentID = 11
                        },
                        new
                        {
                            ConstructionWorkId = 87,
                            NameAr = "وحدات الطاقة غير المنقطعة",
                            ParentID = 11
                        },
                        new
                        {
                            ConstructionWorkId = 88,
                            NameAr = "نقل وتوزيع الطاقة",
                            ParentID = 11
                        },
                        new
                        {
                            ConstructionWorkId = 89,
                            NameAr = "محطات تحويل الطاقة",
                            ParentID = 11
                        },
                        new
                        {
                            ConstructionWorkId = 92,
                            NameAr = "إشارات المرور الضوئية",
                            ParentID = 11
                        },
                        new
                        {
                            ConstructionWorkId = 93,
                            NameAr = " محطات ضخ المياه والصرف الصحي",
                            ParentID = 12
                        },
                        new
                        {
                            ConstructionWorkId = 94,
                            NameAr = "محطات تنقية الميـاه والصرف الصحي",
                            ParentID = 12
                        },
                        new
                        {
                            ConstructionWorkId = 95,
                            NameAr = "خزانات المياه",
                            ParentID = 12
                        },
                        new
                        {
                            ConstructionWorkId = 96,
                            NameAr = "أعمال المياه والصرف الصحي",
                            ParentID = 12
                        },
                        new
                        {
                            ConstructionWorkId = 97,
                            NameAr = "شبكات تصريف السيول",
                            ParentID = 12
                        },
                        new
                        {
                            ConstructionWorkId = 98,
                            NameAr = "شبكات المياه والصرف الصحي",
                            ParentID = 12
                        },
                        new
                        {
                            ConstructionWorkId = 99,
                            NameAr = "مشاريع الري والصرف",
                            ParentID = 12
                        },
                        new
                        {
                            ConstructionWorkId = 100,
                            NameAr = "تقنية الاتصاالت",
                            ParentID = 13
                        },
                        new
                        {
                            ConstructionWorkId = 101,
                            NameAr = "قدرات الشبكة الأساسية",
                            ParentID = 13
                        },
                        new
                        {
                            ConstructionWorkId = 102,
                            NameAr = "خدمات اتصالات معززة",
                            ParentID = 13
                        },
                        new
                        {
                            ConstructionWorkId = 103,
                            NameAr = "خدمات الإنترنت",
                            ParentID = 13
                        },
                        new
                        {
                            ConstructionWorkId = 104,
                            NameAr = "اتصالات هاتفية محلية وبعيدة",
                            ParentID = 13
                        },
                        new
                        {
                            ConstructionWorkId = 105,
                            NameAr = " خدمات اتصالات باستخدام الألياف",
                            ParentID = 13
                        },
                        new
                        {
                            ConstructionWorkId = 106,
                            NameAr = "تطوير النظم والتطبيقات وقواعد البيانات",
                            ParentID = 13
                        },
                        new
                        {
                            ConstructionWorkId = 107,
                            NameAr = "خدمات وصول العملاء",
                            ParentID = 13
                        },
                        new
                        {
                            ConstructionWorkId = 108,
                            NameAr = "خدمات اتصالات باستخدام دوائر الطلب الهاتفي والخطوط المخصصة",
                            ParentID = 13
                        },
                        new
                        {
                            ConstructionWorkId = 109,
                            NameAr = "خدمات اتصالات خلوية",
                            ParentID = 13
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsGolf")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("CountryId");

                    b.ToTable("Country","LookUps");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.DeviceToken", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Android")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DeviceTokenValue")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DeviceVersion")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("SourceIP")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("TimeStamp")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserDeviceId")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("DeviceId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("DeviceToken","Mobile");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.DeviceTokenNotification", b =>
                {
                    b.Property<int>("DeviceTokenNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("DeviceTokenNotificationId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceTokenNotification","Mobile");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Enquiry", b =>
                {
                    b.Property<int>("EnquiryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyCommunicationRequestId")
                        .HasColumnType("int");

                    b.Property<string>("CommericalRegisterNo")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("EnquiryName")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(15000);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("EnquiryId");

                    b.HasIndex("AgencyCommunicationRequestId");

                    b.HasIndex("CommericalRegisterNo");

                    b.HasIndex("TenderId");

                    b.ToTable("Enquiry","Enquiry");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.EnquiryReply", b =>
                {
                    b.Property<int>("EnquiryReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommitteeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("EnquiryId")
                        .HasColumnType("int");

                    b.Property<string>("EnquiryReplyMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(15000);

                    b.Property<int>("EnquiryReplyStatusId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsComment")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("EnquiryReplyId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("EnquiryId");

                    b.HasIndex("EnquiryReplyStatusId");

                    b.ToTable("EnquiryReply","Enquiry");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.EnquiryReplyStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EnquiryReplyStatus","LookUps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAr = "بإنتظار الإعتماد"
                        },
                        new
                        {
                            Id = 2,
                            NameAr = "معتمد"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ExtendOffersValidity", b =>
                {
                    b.Property<int>("ExtendOffersValidityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyCommunicationRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ExtendOffersReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NewOffersExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OffersDuration")
                        .HasColumnType("int");

                    b.Property<int>("ReplyReceivingDurationDays")
                        .HasColumnType("int");

                    b.Property<string>("ReplyReceivingDurationTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("ExtendOffersValidityId");

                    b.HasIndex("AgencyCommunicationRequestId")
                        .IsUnique();

                    b.ToTable("ExtendOffersValidity","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ExtendOffersValidityAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("ExtendOffersValiditySupplierId")
                        .HasColumnType("int");

                    b.Property<string>("FileNetReferenceId")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("AttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("ExtendOffersValiditySupplierId")
                        .IsUnique();

                    b.ToTable("ExtendOffersValidityAttachment","CommunicationAgency");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ExtendOffersValiditySupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("ExtendOffersValidityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PeriodStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupplierCR")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SupplierExtendOfferValidityStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ExtendOffersValidityId");

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.HasIndex("SupplierCR");

                    b.HasIndex("SupplierExtendOfferValidityStatusId");

                    b.ToTable("ExtendOffersValiditySupplier","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.FavouriteSupplier", b =>
                {
                    b.Property<int>("FavouriteSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("FavouriteSupplierListId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SupplierCRNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("FavouriteSupplierId");

                    b.HasIndex("FavouriteSupplierListId");

                    b.HasIndex("SupplierCRNumber");

                    b.ToTable("FavouriteSuppliers","Supplier");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.FavouriteSupplierList", b =>
                {
                    b.Property<int>("FavouriteSupplierListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("FavouriteSupplierListId");

                    b.HasIndex("AgencyCode");

                    b.HasIndex("BranchId");

                    b.ToTable("FavouriteSupplierLists","Supplier");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.FavouriteSupplierTender", b =>
                {
                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierCRNumber")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderId", "SupplierCRNumber");

                    b.ToTable("FavouriteSupplierTenders","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Invitation", b =>
                {
                    b.Property<int>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommericalRegisterNo")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("InvitationTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("InvitedByQualification")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SupplierType")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InvitationId");

                    b.HasIndex("CommericalRegisterNo");

                    b.HasIndex("InvitationTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TenderId");

                    b.ToTable("Invitation","Invitation");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.InvitationType", b =>
                {
                    b.Property<int>("InvitationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("InvitationTypeId");

                    b.ToTable("InvitationType","LookUps");

                    b.HasData(
                        new
                        {
                            InvitationTypeId = 1,
                            NameAr = "عامه"
                        },
                        new
                        {
                            InvitationTypeId = 2,
                            NameAr = "خاصة"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.JoinTechnicalCommittee", b =>
                {
                    b.Property<int>("JoinTechnicalCommitteeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommitteeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("EnquiryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("JoinTechnicalCommitteeId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("EnquiryId");

                    b.ToTable("JoinTechnicalCommittee","Enquiry");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.CancelationReason", b =>
                {
                    b.Property<int>("CancelationReasonId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("CancelationReasonId");

                    b.ToTable("CancelationReason","LookUps");

                    b.HasData(
                        new
                        {
                            CancelationReasonId = 1,
                            NameAr = "وجود أخطاء جوهرية في وثائق المنافسة",
                            NameEn = "وجود أخطاء جوهرية في وثائق المنافسة"
                        },
                        new
                        {
                            CancelationReasonId = 2,
                            NameAr = "مخالفة إجراءات المنافسة لنظام المنافسات والمشتريات الحكومية",
                            NameEn = "مخالفة إجراءات المنافسة لنظام المنافسات والمشتريات الحكومية"
                        },
                        new
                        {
                            CancelationReasonId = 3,
                            NameAr = "تحقيق المصلحة العامة",
                            NameEn = "تحقيق المصلحة العامة"
                        },
                        new
                        {
                            CancelationReasonId = 4,
                            NameAr = "ارتكاب أي من المتنافسين مخالفات",
                            NameEn = "ارتكاب أي من المتنافسين مخالفات"
                        },
                        new
                        {
                            CancelationReasonId = 5,
                            NameAr = "ارتفاع أسعار العروض عن المبالغ المعتمدة",
                            NameEn = "ارتفاع أسعار العروض عن المبالغ المعتمدة"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.EstablishmentType", b =>
                {
                    b.Property<int>("EstablishmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommercialRegistrationNo")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("EstablishmentTypeId");

                    b.ToTable("EstablishmentType","LookUps");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.InvitationStatus", b =>
                {
                    b.Property<int>("InvitationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("InvitationStatusId");

                    b.ToTable("InvitationStatus","LookUps");

                    b.HasData(
                        new
                        {
                            InvitationStatusId = 1,
                            NameAr = "جديدة"
                        },
                        new
                        {
                            InvitationStatusId = 2,
                            NameAr = "تم القبول"
                        },
                        new
                        {
                            InvitationStatusId = 3,
                            NameAr = "تم الرفض"
                        },
                        new
                        {
                            InvitationStatusId = 4,
                            NameAr = "تم الانسحاب"
                        },
                        new
                        {
                            InvitationStatusId = 5
                        },
                        new
                        {
                            InvitationStatusId = 6
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.NegotiationReason", b =>
                {
                    b.Property<int>("NegotiationReasonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("NegotiationReasonId");

                    b.ToTable("NegotiationReason","LookUps");

                    b.HasData(
                        new
                        {
                            NegotiationReasonId = 2,
                            Name = "ارتفاع اسعار العروض عن القيمة المعتمدة للمشروع"
                        },
                        new
                        {
                            NegotiationReasonId = 1,
                            Name = "ارتفاع اسعار العروض عن اسعار السوق بشكل ظاهر"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.NegotiationStatus", b =>
                {
                    b.Property<int>("NegotiationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("NegotiationStatusId");

                    b.ToTable("NegotiationStatus","LookUps");

                    b.HasData(
                        new
                        {
                            NegotiationStatusId = 3,
                            Name = " تحت التحديث "
                        },
                        new
                        {
                            NegotiationStatusId = 5,
                            Name = " تحت التحديث "
                        },
                        new
                        {
                            NegotiationStatusId = 10,
                            Name = " بإنتظار اعتماد الطلب"
                        },
                        new
                        {
                            NegotiationStatusId = 15,
                            Name = "تم رفض الاعتماد "
                        },
                        new
                        {
                            NegotiationStatusId = 20,
                            Name = "بإنتظار اعتماد مركز تحقيق كفاءة الإنفاق "
                        },
                        new
                        {
                            NegotiationStatusId = 25,
                            Name = "مرفوض من مختص مركز تحقيق كفاءة الإنفاق "
                        },
                        new
                        {
                            NegotiationStatusId = 40,
                            Name = "تم الرد (بالرفض)  "
                        },
                        new
                        {
                            NegotiationStatusId = 35,
                            Name = " تم الرد (بالموافقة) "
                        },
                        new
                        {
                            NegotiationStatusId = 45,
                            Name = " تم ارسال الطلب"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.NegotiationSupplierStatus", b =>
                {
                    b.Property<int>("NegotiationSupplierStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("NegotiationSupplierStatusId");

                    b.ToTable("NegotiationSupplierStatus","LookUps");

                    b.HasData(
                        new
                        {
                            NegotiationSupplierStatusId = 15,
                            Name = "تمت الموافقة"
                        },
                        new
                        {
                            NegotiationSupplierStatusId = 20,
                            Name = "تم الرفض"
                        },
                        new
                        {
                            NegotiationSupplierStatusId = 25,
                            Name = "لا يوجد رد"
                        },
                        new
                        {
                            NegotiationSupplierStatusId = 5,
                            Name = "لم يتم ارسال"
                        },
                        new
                        {
                            NegotiationSupplierStatusId = 10,
                            Name = "فى انتظار رد المورد"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.NegotiationType", b =>
                {
                    b.Property<int>("NegotiationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("NegotiationTypeId");

                    b.ToTable("NegotiationType","LookUps");

                    b.HasData(
                        new
                        {
                            NegotiationTypeId = 15,
                            Name = "التفاوض المرحلة الاولى"
                        },
                        new
                        {
                            NegotiationTypeId = 10,
                            Name = "التفاوض المرحلة الثانية"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.NotifacationStatusEntity", b =>
                {
                    b.Property<int>("NotifacationStatusEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotifacationStatusEntityId");

                    b.ToTable("NotifacationStatusEntity","LookUps");

                    b.HasData(
                        new
                        {
                            NotifacationStatusEntityId = 1,
                            Name = "مرسل"
                        },
                        new
                        {
                            NotifacationStatusEntityId = 2,
                            Name = "لم يتم الارسال"
                        },
                        new
                        {
                            NotifacationStatusEntityId = 3,
                            Name = "فشل فى الارسال"
                        },
                        new
                        {
                            NotifacationStatusEntityId = 4,
                            Name = "مقروءه"
                        },
                        new
                        {
                            NotifacationStatusEntityId = 5,
                            Name = "غير مقروءه"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.NotifayTypeEntity", b =>
                {
                    b.Property<int>("NotifayTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotifayTypeId");

                    b.ToTable("NotifayTypeEntity","LookUps");

                    b.HasData(
                        new
                        {
                            NotifayTypeId = 1
                        },
                        new
                        {
                            NotifayTypeId = 2
                        },
                        new
                        {
                            NotifayTypeId = 3
                        },
                        new
                        {
                            NotifayTypeId = 4
                        },
                        new
                        {
                            NotifayTypeId = 5
                        },
                        new
                        {
                            NotifayTypeId = 6
                        },
                        new
                        {
                            NotifayTypeId = 7
                        },
                        new
                        {
                            NotifayTypeId = 8
                        },
                        new
                        {
                            NotifayTypeId = 9
                        },
                        new
                        {
                            NotifayTypeId = 10
                        },
                        new
                        {
                            NotifayTypeId = 11
                        },
                        new
                        {
                            NotifayTypeId = 13
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.OfferSolidarityStatus", b =>
                {
                    b.Property<int>("CombinedStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("CombinedStatusId");

                    b.ToTable("OfferSolidarityStatus","LookUps");

                    b.HasData(
                        new
                        {
                            CombinedStatusId = 1,
                            Name = "جديدة"
                        },
                        new
                        {
                            CombinedStatusId = 2,
                            Name = "تم القبول"
                        },
                        new
                        {
                            CombinedStatusId = 3,
                            Name = "تم الرفض"
                        },
                        new
                        {
                            CombinedStatusId = 4,
                            Name = "بإنتظار الرد"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.OfferStatus", b =>
                {
                    b.Property<int>("OfferStatusId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("OfferStatusId");

                    b.ToTable("OfferStatus","LookUps");

                    b.HasData(
                        new
                        {
                            OfferStatusId = 1,
                            NameAr = "تحت الانشاء"
                        },
                        new
                        {
                            OfferStatusId = 2,
                            NameAr = "مكتمل فى انتظار الارسال"
                        },
                        new
                        {
                            OfferStatusId = 4,
                            NameAr = "مستلم"
                        },
                        new
                        {
                            OfferStatusId = 6,
                            NameAr = "ملغى"
                        },
                        new
                        {
                            OfferStatusId = 5
                        },
                        new
                        {
                            OfferStatusId = 7
                        },
                        new
                        {
                            OfferStatusId = 8
                        },
                        new
                        {
                            OfferStatusId = 9
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Lookups.SupplierSecondNegotiationStatus", b =>
                {
                    b.Property<int>("SupplierNegotiaitionStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("SupplierNegotiaitionStatusId");

                    b.ToTable("SupplierSecondNegotiationStatus","LookUps");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MaintenanceRunningWork", b =>
                {
                    b.Property<int>("MaintenanceRunningWorkId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("MaintenanceRunningWorkId");

                    b.ToTable("MaintenanceRunningWork","LookUps");

                    b.HasData(
                        new
                        {
                            MaintenanceRunningWorkId = 1,
                            NameAr = " صيانة وتشغيل المسالخ"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 2,
                            NameAr = "تقنية الإتصالات"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 3,
                            NameAr = "صيانة وتشغيل أعمال المياه والصرف الصحي"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 4,
                            NameAr = "حفر االأبار"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 5,
                            NameAr = "صيانة وتشغيل الأعمال الصناعية"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 6,
                            NameAr = "تخديم وتأمين التغذية للمراكز الطبية"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 7,
                            NameAr = " نظافة المدن والتخلص من النفايات مقالب وردم النفايات "
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 8,
                            NameAr = " صيانة السدود"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 9,
                            NameAr = "صيانة وتشغيل الأعمال البحرية"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 10,
                            NameAr = "صيانة تقنية الإتصالات"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 11,
                            NameAr = "صيــانة الحدائق والمنتزهـات"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 12,
                            NameAr = "صيانة الطرق"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 13,
                            NameAr = "صيانة وتشغيل الأعمال الميكانيكيـة"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 14,
                            NameAr = "صيانة المباني"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 15,
                            NameAr = "تخديم و تأمين الإعاشه لألفراد"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 16,
                            NameAr = "صيانة المـراكـز الطبيــة"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 17,
                            NameAr = "صيانة وتشغيل الأعمال اإللكترونيــة"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 18,
                            NameAr = "صيانة وتشغيل الأعمال الكهربائية"
                        },
                        new
                        {
                            MaintenanceRunningWorkId = 19,
                            NameAr = " صيانة وتشغيل تقنية الإتصالات"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MandatoryList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("DivisionCode")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("DivisionNameAr")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("DivisionNameEn")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("MandatoryList","MandatoryList");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MandatoryListChangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("DivisionCode")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("DivisionNameAr")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("DivisionNameEn")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OriginalEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("OriginalEntityId");

                    b.HasIndex("StatusId");

                    b.ToTable("MandatoryListChangeRequest","MandatoryList");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MandatoryListChangeRequestStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("StatusId");

                    b.ToTable("MandatoryListChangeRequestStatus","LookUps");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            NameAr = "بانتظار الاعتماد"
                        },
                        new
                        {
                            StatusId = 2,
                            NameAr = "تم الرفض"
                        },
                        new
                        {
                            StatusId = 3,
                            NameAr = "معتمدة"
                        },
                        new
                        {
                            StatusId = 4,
                            NameAr = "مغلقة"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MandatoryListProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CSICode")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MandatoryListId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<double>("PriceCelling")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("MandatoryListId");

                    b.ToTable("MandatoryListProduct","MandatoryList");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MandatoryListProductChangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CSICode")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MandatoryListChangeRequestId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<double>("PriceCelling")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("MandatoryListChangeRequestId");

                    b.ToTable("MandatoryListProductChangeRequest","MandatoryList");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MandatoryListStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("StatusId");

                    b.ToTable("MandatoryListStatus","LookUps");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            NameAr = "تحت الإنشاء"
                        },
                        new
                        {
                            StatusId = 2,
                            NameAr = "بانتظار الاعتماد"
                        },
                        new
                        {
                            StatusId = 3,
                            NameAr = "تم الرفض"
                        },
                        new
                        {
                            StatusId = 4,
                            NameAr = "معتمدة"
                        },
                        new
                        {
                            StatusId = 5,
                            NameAr = "بانتظار اعتماد الإلغاء"
                        },
                        new
                        {
                            StatusId = 6,
                            NameAr = "تم رفض الالغاء"
                        },
                        new
                        {
                            StatusId = 7,
                            NameAr = "تم الالغاء"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MobileAlert", b =>
                {
                    b.Property<int>("MobileAlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("GroupCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("MessageStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("MobileAlertId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("MessageStatusId");

                    b.ToTable("MobileAlert","Mobile");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiation", b =>
                {
                    b.Property<int>("NegotiationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("NegotiationReasonId")
                        .HasColumnType("int");

                    b.Property<int>("NegotiationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierReplyPeriodHours")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("NegotiationId");

                    b.HasIndex("AgencyRequestId");

                    b.HasIndex("NegotiationReasonId");

                    b.HasIndex("NegotiationTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Negotiation","CommunicationRequest");

                    b.HasDiscriminator<int>("NegotiationTypeId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.NegotiationAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FileNetReferenceId")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("NegotiationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("AttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("NegotiationId");

                    b.ToTable("NegotiationAttachment","CommunicationAgency");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationFirstStageSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<int>("NegotiationId")
                        .HasColumnType("int");

                    b.Property<int?>("NegotiationSupplierStatusId")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PeriodStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupplierCR")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal>("offerOriginalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("NegotiationId");

                    b.HasIndex("NegotiationSupplierStatusId");

                    b.HasIndex("OfferId");

                    b.HasIndex("SupplierCR");

                    b.ToTable("NegotiationFirstStageSupplier","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationQuantityTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierQuantityTableId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("refNegotiationSecondStage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("refNegotiationSecondStage");

                    b.ToTable("NegotiationQuantityTable","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationQuantityTableItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileRefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NegotiationQuantityTableId")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplierQuantityTableItemId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("originalQTY")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NegotiationQuantityTableId");

                    b.ToTable("NegotiationQuantityTableItem","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationSupplierQuantityTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SupplierQuantityTableId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("refNegotiationSecondStage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierQuantityTableId");

                    b.HasIndex("refNegotiationSecondStage");

                    b.ToTable("NegotiationSupplierQuantityTable","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationSupplierQuantityTableItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityTemplateId")
                        .HasColumnType("int");

                    b.Property<long>("ColumnId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("ItemNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("NegotiationSupplierQuantityTableId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenderFormHeaderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NegotiationSupplierQuantityTableId");

                    b.ToTable("NegotiationSupplierQuantityTableItem","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.NotificationCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("NotificationCategory","LookUps");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.NotificationOperationCode", b =>
                {
                    b.Property<int>("NotificationOperationCodeId")
                        .HasColumnType("int");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool>("CanEditEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditSMS")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("DefaultEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("DefaultSMS")
                        .HasColumnType("bit");

                    b.Property<string>("EmailBodyTemplateAr")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<string>("EmailBodyTemplateEn")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<string>("EmailSubjectTemplateAr")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("EmailSubjectTemplateEn")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("NotificationCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("OperationCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PanelTemplateAr")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("PanelTemplateEn")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("SmsTemplateAr")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("SmsTemplateEn")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("NotificationOperationCodeId");

                    b.HasIndex("NotificationCategoryId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("NotificationOperationCode","LookUps");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommericalRegisterNo")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Discount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExclusionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FinalPriceAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FinalPriceBeforeDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FinancialEvaluationLevel")
                        .HasColumnType("int");

                    b.Property<string>("FinantialNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinantialOfferLetterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinantialOfferLetterNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinantialRejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBankGuaranteeAttached")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFinaintialOfferLetterAttached")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFinantialOfferLetterCopyAttached")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManuallyApplied")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOfferCopyAttached")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOfferFinancialDetailsEntered")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOfferLetterAttached")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOpened")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPurchaseBillAttached")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSolidarity")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisitationAttached")
                        .HasColumnType("bit");

                    b.Property<string>("JustificationOfRecommendation")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfferAcceptanceStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OfferLetterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfferLetterNumber")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("OfferPresentationWayId")
                        .HasColumnType("int");

                    b.Property<int>("OfferStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("OfferTechnicalEvaluationStatusId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OfferWeightAfterCalcNPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PartialOfferAwardingValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuplierId")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalEvaluationLevel")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalOfferAwardingValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("WithrdrawlDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OfferId");

                    b.HasIndex("CommericalRegisterNo");

                    b.HasIndex("OfferPresentationWayId");

                    b.HasIndex("OfferStatusId");

                    b.HasIndex("TenderId");

                    b.ToTable("Offer","Offer");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.OfferHistory", b =>
                {
                    b.Property<int>("OfferHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("CommericalRegisterNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("OfferAcceptanceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("OfferStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("OfferTechnicalEvaluationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<int>("TenderStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OfferHistoryId");

                    b.HasIndex("ActionId");

                    b.HasIndex("OfferId");

                    b.HasIndex("OfferStatusId");

                    b.HasIndex("TenderStatusId");

                    b.ToTable("OfferHistory","Offer");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.OfferSolidarity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CRNumber")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("SolidarityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CRNumber");

                    b.HasIndex("OfferId");

                    b.HasIndex("StatusId");

                    b.ToTable("OfferSolidarity","Offer");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PlaintRequestAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FileNetReferenceId")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("PlaintRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("AttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("PlaintRequestId");

                    b.ToTable("PlaintRequestAttachment","CommunicationAgency");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Point", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PointValue")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Point","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PostQualificationSuppliersInvitations", b =>
                {
                    b.Property<int>("PostQualificationSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommercialNumber")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PostQualificationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("PostQualificationSupplierId");

                    b.HasIndex("CommercialNumber");

                    b.HasIndex("PostQualificationId");

                    b.HasIndex("StatusId");

                    b.ToTable("PostQualificationSuppliersInvitations","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PrePlanning", b =>
                {
                    b.Property<int>("PrePlanningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("DeleteRejectionReason")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<int?>("DurationInMonths")
                        .HasColumnType("int");

                    b.Property<int?>("DurationInYears")
                        .HasColumnType("int");

                    b.Property<bool?>("InsideKSA")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleteRequested")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ProjectNature")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("YearQuarterId")
                        .HasColumnType("int");

                    b.HasKey("PrePlanningId");

                    b.HasIndex("AgencyCode");

                    b.HasIndex("StatusId");

                    b.HasIndex("YearQuarterId");

                    b.ToTable("PrePlanning","PrePlanning");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PrePlanningArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PrePlanningId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("PrePlanningId");

                    b.ToTable("PrePlanningArea","PrePlanning");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PrePlanningCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PrePlanningId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PrePlanningId");

                    b.ToTable("PrePlanningCountry","PrePlanning");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PrePlanningProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PrePlanningId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("PrePlanningId");

                    b.ToTable("PrePlanningProjectType","PrePlanning");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PrePlanningStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("StatusId");

                    b.ToTable("PrePlanningStatus","Lookups");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            NameAr = "تحت التحديث"
                        },
                        new
                        {
                            StatusId = 2,
                            NameAr = "بانتظار اعتماد الطلب"
                        },
                        new
                        {
                            StatusId = 3,
                            NameAr = "معتمد"
                        },
                        new
                        {
                            StatusId = 4,
                            NameAr = "تم رفض اعتماد الطلب"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationCategoryResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QualificationItemCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("ResultValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SupplierSelectedCr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("QualificationItemCategoryId");

                    b.HasIndex("SupplierSelectedCr");

                    b.HasIndex("TenderId");

                    b.ToTable("QualificationCategoryResult","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationConfiguration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Max")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Min")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QualificationItemId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("QualificationItemId");

                    b.HasIndex("TenderId");

                    b.ToTable("QualificationConfiguration","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationConfigurationAttachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QualificationSupplierDataId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.HasIndex("QualificationSupplierDataId");

                    b.ToTable("QualificationConfigurationAttachment","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationEvaluation.QualificationSubCategoryConfiguration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QualificationSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("QualificationSubCategoryId");

                    b.HasIndex("TenderId");

                    b.ToTable("QualificationSubCategoryConfiguration","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationEvaluation.QualificationSupplierProject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ContractValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerformanceEvaluation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QualificationSupplierDataId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupplierSelectedCr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.HasIndex("QualificationSupplierDataId");

                    b.HasIndex("SupplierSelectedCr");

                    b.HasIndex("TenderId");

                    b.ToTable("QualificationSupplierProject","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationFinalResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FailingReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QualificationLookupId")
                        .HasColumnType("int");

                    b.Property<decimal>("ResultValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SupplierSelectedCr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.HasIndex("QualificationLookupId");

                    b.HasIndex("SupplierSelectedCr");

                    b.HasIndex("TenderId");

                    b.ToTable("QualificationFinalResult","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfigure")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QualificationItemTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QualificationItemTypeId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("QualificationItem","Qualification");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Code = 1,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "عدد سنوات الخبرة في مجال طلب التأهيل",
                            QualificationItemTypeId = 2,
                            SubCategoryId = 1
                        },
                        new
                        {
                            ID = 2,
                            Code = 2,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "عدد المشاريع المنفذة خلال الثلاث سنوات الأخيرة في مجال طلب التأهيل",
                            QualificationItemTypeId = 2,
                            SubCategoryId = 1
                        },
                        new
                        {
                            ID = 3,
                            Code = 3,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "إجمالي قيمة المشاريع خلال الثلاث سنوات الأخيرة في مجال طلب التأهيل",
                            QualificationItemTypeId = 2,
                            SubCategoryId = 1
                        },
                        new
                        {
                            ID = 6,
                            Code = 4,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "ما هي معايير ضمان الجودة",
                            QualificationItemTypeId = 1,
                            SubCategoryId = 4
                        },
                        new
                        {
                            ID = 7,
                            Code = 5,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "ما هي معايير ضمان البيئة والصحة والسلامة",
                            QualificationItemTypeId = 1,
                            SubCategoryId = 5
                        },
                        new
                        {
                            ID = 8,
                            Code = 6,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "عدد المشاريع القائمة",
                            QualificationItemTypeId = 2,
                            SubCategoryId = 2
                        },
                        new
                        {
                            ID = 9,
                            Code = 7,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "قيمة المشاريع القائمة",
                            QualificationItemTypeId = 2,
                            SubCategoryId = 2
                        },
                        new
                        {
                            ID = 10,
                            Code = 8,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "عدد الموظفين",
                            QualificationItemTypeId = 2,
                            SubCategoryId = 3
                        },
                        new
                        {
                            ID = 11,
                            Code = 9,
                            IsConfigure = false,
                            IsDeleted = false,
                            Name = "عدد الموظفين السعوديين",
                            QualificationItemTypeId = 2,
                            SubCategoryId = 3
                        },
                        new
                        {
                            ID = 12,
                            Code = 10,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "نسبة الموظفين السعوديين",
                            QualificationItemTypeId = 3,
                            SubCategoryId = 3
                        },
                        new
                        {
                            ID = 13,
                            Code = 11,
                            IsConfigure = true,
                            IsDeleted = true,
                            Name = "تأمين التعويض المهني",
                            QualificationItemTypeId = 1,
                            SubCategoryId = 6
                        },
                        new
                        {
                            ID = 14,
                            Code = 12,
                            IsConfigure = true,
                            IsDeleted = true,
                            Name = "تأمين المسؤولية ضد الغير",
                            QualificationItemTypeId = 1,
                            SubCategoryId = 6
                        },
                        new
                        {
                            ID = 15,
                            Code = 13,
                            IsConfigure = true,
                            IsDeleted = true,
                            Name = "تأمين المسؤولية التجارية العامة",
                            QualificationItemTypeId = 1,
                            SubCategoryId = 6
                        },
                        new
                        {
                            ID = 30,
                            Code = 11,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "يرجى تأكيد القدرة على تقديم التأمين اللازم",
                            QualificationItemTypeId = 1,
                            SubCategoryId = 6
                        },
                        new
                        {
                            ID = 16,
                            Code = 15,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "النقدية ومكافئات النقدية",
                            QualificationItemTypeId = 4,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 17,
                            Code = 16,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "الحسابات مستحقة القبض",
                            QualificationItemTypeId = 4,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 18,
                            Code = 18,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "الالتزامات المتداولة",
                            QualificationItemTypeId = 4,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 19,
                            Code = 0,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "نسبة النقدية (النقدية ومكافئات النقدية \\ الالتزامات المتداولة)",
                            QualificationItemTypeId = 3,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 20,
                            Code = 0,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "نسبة السيولة السريعة ((النقدية ومكافئات النقدية+الحسابات المستحقة القبض)/الالتزامات المتداولة)",
                            QualificationItemTypeId = 3,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 21,
                            Code = 0,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "نسبة التداول (الأصول المتداولة \\ الالتزامات المتداولة)",
                            QualificationItemTypeId = 3,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 22,
                            Code = 0,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "يرجى تأكيد القدرة على تقديم آخر 3 سنوات من البيانات المالية المدققة، إذا طلب من الجهة",
                            QualificationItemTypeId = 1,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 23,
                            Code = 14,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "   الأصول المتداولة",
                            QualificationItemTypeId = 4,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 24,
                            Code = 17,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "مجموع الموجودات",
                            QualificationItemTypeId = 4,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 25,
                            Code = 19,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "مجموع المطلوبات",
                            QualificationItemTypeId = 4,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 26,
                            Code = 20,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "مجموع الإيرادات",
                            QualificationItemTypeId = 4,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 27,
                            Code = 21,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "صافي الأرباح",
                            QualificationItemTypeId = 4,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 28,
                            Code = 0,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "نسبة الالتزامات (مجموع المطلوبات\\مجموع الموجودات)",
                            QualificationItemTypeId = 3,
                            SubCategoryId = 7
                        },
                        new
                        {
                            ID = 29,
                            Code = 0,
                            IsConfigure = true,
                            IsDeleted = false,
                            Name = "معدل التغيير التراكمي لمعدل الربحية",
                            QualificationItemTypeId = 2,
                            SubCategoryId = 7
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationItemCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("QualificationItemCategory","Qualification");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "القدرات الفنية والإدارية"
                        },
                        new
                        {
                            ID = 2,
                            Name = "القدرات المالية"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationItemType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("QualificationItemType","Qualification");

                    b.HasData(
                        new
                        {
                            ID = 3,
                            Name = "Percentage"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Range"
                        },
                        new
                        {
                            ID = 1,
                            Name = "Select"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Value"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationLookup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("QualificationLookupId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QualificationLookupId");

                    b.ToTable("QualificationLookup","Qualification");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "شهادة ايزو",
                            QualificationLookupId = 1
                        },
                        new
                        {
                            ID = 2,
                            Name = "دليل جودة",
                            QualificationLookupId = 1
                        },
                        new
                        {
                            ID = 3,
                            Name = "لا يوجد",
                            QualificationLookupId = 1
                        },
                        new
                        {
                            ID = 4,
                            Name = "شهادة OSHA أو OHSAS",
                            QualificationLookupId = 2
                        },
                        new
                        {
                            ID = 5,
                            Name = "دليل البيئة والصحة والسلامة",
                            QualificationLookupId = 2
                        },
                        new
                        {
                            ID = 6,
                            Name = "لا يوجد",
                            QualificationLookupId = 2
                        },
                        new
                        {
                            ID = 7,
                            Name = "يوجد",
                            QualificationLookupId = 3
                        },
                        new
                        {
                            ID = 8,
                            Name = "لا يوجد",
                            QualificationLookupId = 3
                        },
                        new
                        {
                            ID = 9,
                            Name = "نعم",
                            QualificationLookupId = 4
                        },
                        new
                        {
                            ID = 10,
                            Name = "لا",
                            QualificationLookupId = 4
                        },
                        new
                        {
                            ID = 11,
                            Name = "مرتفع",
                            QualificationLookupId = 5
                        },
                        new
                        {
                            ID = 13,
                            Name = "منخفض",
                            QualificationLookupId = 5
                        },
                        new
                        {
                            ID = 12,
                            Name = "ثابت",
                            QualificationLookupId = 5
                        },
                        new
                        {
                            ID = 14,
                            Name = " ناجح",
                            QualificationLookupId = 6
                        },
                        new
                        {
                            ID = 15,
                            Name = "لم يجتاز الاختبار",
                            QualificationLookupId = 6
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationLookupsName", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.ToTable("QualificationLookupsNames","Qualification");

                    b.HasData(
                        new
                        {
                            ID = 4,
                            Name = "ضمان الجوده"
                        },
                        new
                        {
                            ID = 3,
                            Name = "معاير ضمان البيئه والصحه"
                        },
                        new
                        {
                            ID = 2,
                            Name = "سؤال يوجد // لا يوجد"
                        },
                        new
                        {
                            ID = 1,
                            Name = "سؤال نعم // لا"
                        },
                        new
                        {
                            ID = 5,
                            Name = "اتجاه معدل الربحية"
                        },
                        new
                        {
                            ID = 6,
                            Name = "نتيجه التاهيل"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationSubCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsConfigure")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QualificationCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QualificationCategoryId");

                    b.ToTable("QualificationSubCategory","Qualification");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IsConfigure = true,
                            Name = "الخبرات السابقة",
                            QualificationCategoryId = 1
                        },
                        new
                        {
                            ID = 2,
                            IsConfigure = true,
                            Name = "الالتزامات التعاقدية القائمة",
                            QualificationCategoryId = 1
                        },
                        new
                        {
                            ID = 3,
                            IsConfigure = true,
                            Name = "الموارد البشرية",
                            QualificationCategoryId = 1
                        },
                        new
                        {
                            ID = 4,
                            IsConfigure = true,
                            Name = "الجودة",
                            QualificationCategoryId = 1
                        },
                        new
                        {
                            ID = 5,
                            IsConfigure = true,
                            Name = "البيئة والصحة والسلامة",
                            QualificationCategoryId = 1
                        },
                        new
                        {
                            ID = 6,
                            IsConfigure = true,
                            Name = "التأمين",
                            QualificationCategoryId = 1
                        },
                        new
                        {
                            ID = 7,
                            IsConfigure = true,
                            Name = "البيانات الماليه",
                            QualificationCategoryId = 2
                        },
                        new
                        {
                            ID = 8,
                            IsConfigure = false,
                            Name = "بيان الميزانية العمومية",
                            QualificationCategoryId = 2
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationSubCategoryResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QualificationSubCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("ResultValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SupplierSelectedCr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.HasIndex("QualificationSubCategoryId");

                    b.HasIndex("SupplierSelectedCr");

                    b.HasIndex("TenderId");

                    b.ToTable("QualificationSubCategoryResult","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationSupplierData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CoverageExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("InsuranceProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("LevelOfCoverage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PointValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QualificationConfigurationId")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationItemId")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationLookupId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierSelectedCr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal>("SupplierValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("QualificationConfigurationId");

                    b.HasIndex("QualificationItemId");

                    b.HasIndex("QualificationLookupId");

                    b.HasIndex("SupplierSelectedCr");

                    b.HasIndex("TenderId");

                    b.ToTable("QualificationSupplierData","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationSupplierDataYearly", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("QualificationItemId")
                        .HasColumnType("int");

                    b.Property<int>("QualificationYearId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierSelectedCr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal>("SupplierValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.HasIndex("QualificationItemId");

                    b.HasIndex("QualificationYearId");

                    b.HasIndex("SupplierSelectedCr");

                    b.HasIndex("TenderId");

                    b.ToTable("QualificationSupplierDataYearly","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("QualificationType","Qualification");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "صغير"
                        },
                        new
                        {
                            ID = 2,
                            Name = "وسط"
                        },
                        new
                        {
                            ID = 3,
                            Name = "كبير"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationTypeCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QualificationSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("QualificationTypeId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QualificationSubCategoryId");

                    b.HasIndex("QualificationTypeId");

                    b.ToTable("QualificationTypeCategory","Qualification");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            QualificationSubCategoryId = 1,
                            QualificationTypeId = 1
                        },
                        new
                        {
                            ID = 2,
                            QualificationSubCategoryId = 2,
                            QualificationTypeId = 1
                        },
                        new
                        {
                            ID = 3,
                            QualificationSubCategoryId = 3,
                            QualificationTypeId = 1
                        },
                        new
                        {
                            ID = 6,
                            QualificationSubCategoryId = 1,
                            QualificationTypeId = 2
                        },
                        new
                        {
                            ID = 7,
                            QualificationSubCategoryId = 2,
                            QualificationTypeId = 2
                        },
                        new
                        {
                            ID = 8,
                            QualificationSubCategoryId = 3,
                            QualificationTypeId = 2
                        },
                        new
                        {
                            ID = 9,
                            QualificationSubCategoryId = 4,
                            QualificationTypeId = 2
                        },
                        new
                        {
                            ID = 10,
                            QualificationSubCategoryId = 5,
                            QualificationTypeId = 2
                        },
                        new
                        {
                            ID = 13,
                            QualificationSubCategoryId = 1,
                            QualificationTypeId = 3
                        },
                        new
                        {
                            ID = 14,
                            QualificationSubCategoryId = 4,
                            QualificationTypeId = 3
                        },
                        new
                        {
                            ID = 15,
                            QualificationSubCategoryId = 5,
                            QualificationTypeId = 3
                        },
                        new
                        {
                            ID = 16,
                            QualificationSubCategoryId = 2,
                            QualificationTypeId = 3
                        },
                        new
                        {
                            ID = 17,
                            QualificationSubCategoryId = 3,
                            QualificationTypeId = 3
                        },
                        new
                        {
                            ID = 18,
                            QualificationSubCategoryId = 6,
                            QualificationTypeId = 3
                        },
                        new
                        {
                            ID = 19,
                            QualificationSubCategoryId = 7,
                            QualificationTypeId = 3
                        },
                        new
                        {
                            ID = 23,
                            QualificationSubCategoryId = 7,
                            QualificationTypeId = 1
                        },
                        new
                        {
                            ID = 24,
                            QualificationSubCategoryId = 7,
                            QualificationTypeId = 2
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationYear", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.ToTable("QualificationYear","Qualification");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "0"
                        },
                        new
                        {
                            ID = 2,
                            Name = "-1"
                        },
                        new
                        {
                            ID = 3,
                            Name = "-2"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QuantityTableRowType", b =>
                {
                    b.Property<int>("QuantityTableRowTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("QuantityTableRowTypeId");

                    b.ToTable("QuantityTableRowType","Lookups");

                    b.HasData(
                        new
                        {
                            QuantityTableRowTypeId = 1,
                            NameAr = "متوفر",
                            NameEn = "Available"
                        },
                        new
                        {
                            QuantityTableRowTypeId = 2,
                            NameAr = "غير متوفر",
                            NameEn = "Not Available"
                        },
                        new
                        {
                            QuantityTableRowTypeId = 3,
                            NameAr = "مجانى",
                            NameEn = "Free"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.RejectionHistory", b =>
                {
                    b.Property<int>("RejectionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgencyCommunicationRequestAgencyRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("RequestsRejectionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ReuestId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("RejectionHistoryId");

                    b.HasIndex("AgencyCommunicationRequestAgencyRequestId");

                    b.HasIndex("RequestsRejectionTypeId");

                    b.ToTable("RejectionHistory","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.RequestsRejectionType", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestsRejectionType","LookUps");

                    b.HasData(
                        new
                        {
                            RequestTypeId = 1,
                            NameAr = "تظلم",
                            NameEn = "Plaint"
                        },
                        new
                        {
                            RequestTypeId = 2,
                            NameAr = "تصعيد تظلم",
                            NameEn = "Plaint Escalation"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Settings.NationalProductSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("NationalProductSettings","Settings");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SpendingCategory", b =>
                {
                    b.Property<int>("SpendingCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("SpendingCategoryId");

                    b.ToTable("SpendingCategory","LookUps");

                    b.HasData(
                        new
                        {
                            SpendingCategoryId = 1,
                            NameAr = "إنشاء المبانى",
                            NameEn = "إنشاء المبانى"
                        },
                        new
                        {
                            SpendingCategoryId = 2,
                            NameAr = "إنشاء الطرق",
                            NameEn = "إنشاء الطرق"
                        },
                        new
                        {
                            SpendingCategoryId = 3,
                            NameAr = "الخدمات الهندسية(تصميم/إشراف)",
                            NameEn = "الخدمات الهندسية(تصميم/إشراف)"
                        },
                        new
                        {
                            SpendingCategoryId = 4,
                            NameAr = "الصيانة والتشغيل",
                            NameEn = "الصيانة والتشغيل"
                        },
                        new
                        {
                            SpendingCategoryId = 5,
                            NameAr = "صيانة الطرق",
                            NameEn = "صيانة الطرق"
                        },
                        new
                        {
                            SpendingCategoryId = 6,
                            NameAr = "الإستئجار",
                            NameEn = "الإستئجار"
                        },
                        new
                        {
                            SpendingCategoryId = 7,
                            NameAr = "الصيانة الطبية",
                            NameEn = "الصيانة الطبية"
                        },
                        new
                        {
                            SpendingCategoryId = 8,
                            NameAr = "نظافة المدن",
                            NameEn = "نظافة المدن"
                        },
                        new
                        {
                            SpendingCategoryId = 9,
                            NameAr = "التغذية",
                            NameEn = "التغذية"
                        },
                        new
                        {
                            SpendingCategoryId = 10,
                            NameAr = "المستلزمات الطبية",
                            NameEn = "المستلزمات الطبية"
                        },
                        new
                        {
                            SpendingCategoryId = 11,
                            NameAr = "الأدوية",
                            NameEn = "الأدوية"
                        },
                        new
                        {
                            SpendingCategoryId = 12,
                            NameAr = "الخدمات الإستشارية",
                            NameEn = "الخدمات الإستشارية"
                        },
                        new
                        {
                            SpendingCategoryId = 13,
                            NameAr = "تقنية المعلومات",
                            NameEn = "تقنية المعلومات"
                        },
                        new
                        {
                            SpendingCategoryId = 14,
                            NameAr = "توريد",
                            NameEn = "توريد"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("FileNetReferenceId")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("AttachmentId");

                    b.HasIndex("OfferId");

                    b.ToTable("SupplierAttachment","Offer");

                    b.HasDiscriminator<int>("AttachType");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierBankGuaranteeDetail", b =>
                {
                    b.Property<int>("BankGuaranteeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("GuaranteeDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("GuaranteeEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuaranteeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("GuaranteeStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBankGuaranteeValid")
                        .HasColumnType("bit");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("BankGuaranteeId");

                    b.HasIndex("BankId");

                    b.HasIndex("OfferId");

                    b.ToTable("SupplierBankGuaranteeDetail");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierCombinedDetail", b =>
                {
                    b.Property<int>("CombinedDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CombinedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChamberJoiningAttached")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChamberJoiningValid")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCommercialRegisterAttached")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCommercialRegisterValid")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSaudizationAttached")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSaudizationValidDate")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSocialInsuranceAttached")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSocialInsuranceValidDate")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSpecificationAttached")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSpecificationValidDate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsZakatAttached")
                        .HasColumnType("bit");

                    b.Property<bool>("IsZakatValidDate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("CombinedDetailId");

                    b.HasIndex("CombinedId")
                        .IsUnique();

                    b.ToTable("SupplierCombinedDetail","Offer");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierExtendOfferDatesRequest", b =>
                {
                    b.Property<int>("SupplierExtendOfferDatesRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyCommunicationRequestId")
                        .HasColumnType("int");

                    b.Property<string>("CR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ExtendOfferDatesRequestReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExtendOfferDatesRequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("SupplierExtendOfferDatesRequestId");

                    b.HasIndex("AgencyCommunicationRequestId");

                    b.ToTable("SupplierExtendOfferDatesRequest","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierExtendOffersValidityStatus", b =>
                {
                    b.Property<int>("SupplierExtendOffersValidityStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("SupplierExtendOffersValidityStatusId");

                    b.ToTable("SupplierExtendOffersValidityStatus","LookUps");

                    b.HasData(
                        new
                        {
                            SupplierExtendOffersValidityStatusId = 1,
                            Name = "تم إرسال الطلب"
                        },
                        new
                        {
                            SupplierExtendOffersValidityStatusId = 5,
                            Name = "تحت المراجعة"
                        },
                        new
                        {
                            SupplierExtendOffersValidityStatusId = 10,
                            Name = "تم الرد (بالموافقة)"
                        },
                        new
                        {
                            SupplierExtendOffersValidityStatusId = 15,
                            Name = "تم الرد (بالرفض)"
                        },
                        new
                        {
                            SupplierExtendOffersValidityStatusId = 16,
                            Name = "تم الرد (بالموافقة)"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierPreQualificationAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("FileNetReferenceId")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SupPreQAttachmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("AttachmentId");

                    b.HasIndex("SupPreQAttachmentId");

                    b.ToTable("SupplierPreQualificationAttachment","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierPreQualificationDocument", b =>
                {
                    b.Property<int>("SupplierPreQualificationDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PreQualificationId")
                        .HasColumnType("int");

                    b.Property<int?>("PreQualificationResult")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("SupplierPreQualificationDocumentId");

                    b.HasIndex("PreQualificationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierPreQualificationDocument","Qualification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierSpecificationDetail", b =>
                {
                    b.Property<int>("SpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompinedDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("ConstructionWorkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("Degree")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsForApplier")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<int?>("MaintenanceRunningWorkId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("SpecificationId");

                    b.HasIndex("CompinedDetailId");

                    b.HasIndex("ConstructionWorkId");

                    b.HasIndex("MaintenanceRunningWorkId");

                    b.ToTable("SupplierSpecificationDetail","Offer");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierTenderQuantityTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdjustedTotalDiscount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdjustedTotalPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AdjustedTotalVAT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<long?>("TenederQuantityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("TenederQuantityId");

                    b.ToTable("SupplierTenderQuantityTable","Offer");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierTenderQuantityTableItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("AlternativeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ColumnId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<long>("ItemNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("SupplierTenderQuantityTableId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenderFormHeaderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenderQuantityTableItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierTenderQuantityTableId");

                    b.HasIndex("TenderQuantityTableItemId");

                    b.ToTable("SupplierTenderQuantityTableItem","Offer");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierViolator", b =>
                {
                    b.Property<int>("SupplierViolatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CR")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TenderChangeRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("SupplierViolatorId");

                    b.HasIndex("CR");

                    b.HasIndex("TenderChangeRequestId");

                    b.ToTable("SupplierViolator","Supplier");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SyncDataWithOldMonafasat", b =>
                {
                    b.Property<int>("SyncDataWithOldMonafasatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSendSuccessfully")
                        .HasColumnType("bit");

                    b.Property<string>("RequestInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("SyncDataWithOldMonafasatId");

                    b.ToTable("SyncDataWithOldMonafasat","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TechnicianReportAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FileNetReferenceId")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("AttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("OfferId");

                    b.ToTable("TechnicianReportAttachments","Offer");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Tender", b =>
                {
                    b.Property<int>("TenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcceptedAnnouncementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityDescription")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("AgreementDays")
                        .HasColumnType("int");

                    b.Property<int?>("AgreementMonthes")
                        .HasColumnType("int");

                    b.Property<int?>("AgreementTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AgreementYears")
                        .HasColumnType("int");

                    b.Property<bool?>("AuditorAgree")
                        .HasColumnType("bit");

                    b.Property<int?>("AwardingDiscountPercentage")
                        .HasColumnType("int");

                    b.Property<int?>("AwardingMonths")
                        .HasColumnType("int");

                    b.Property<string>("AwardingReportFileName")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AwardingReportFileNameId")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("AwardingStoppingPeriod")
                        .HasColumnType("int");

                    b.Property<decimal?>("BonusValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BuildingName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("CheckingDateSet")
                        .HasColumnType("bit");

                    b.Property<bool?>("CheckingNotificationSent")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompetitionIsBudgeted")
                        .HasColumnType("bit");

                    b.Property<int?>("ConditionTemplateStageStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ConditionsBookletDeliveryAddressId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ConditionsBookletPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("CreatedByTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(5000);

                    b.Property<int?>("DirectPurchaseCommitteeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EstimatedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FinalGuaranteeDeliveryAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<decimal>("FinancialCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FloarNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("HasAlternativeOffer")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasGuarantee")
                        .HasColumnType("bit");

                    b.Property<string>("InitialGuaranteeAddress")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<decimal?>("InitialGuaranteePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("InsideKSA")
                        .HasColumnType("bit");

                    b.Property<int?>("InvitationTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNotificationSentForStoppingPeriod")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSendToEmarketPlace")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUnitSecreteryAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastEnqueriesDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastOfferPresentationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NationalProductPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NumberOfWinners")
                        .HasColumnType("int");

                    b.Property<int?>("OfferPresentationWayId")
                        .HasColumnType("int");

                    b.Property<int?>("OffersCheckingCommitteeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OffersCheckingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OffersOpeningAddressId")
                        .HasColumnType("int");

                    b.Property<int?>("OffersOpeningCommitteeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OffersOpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("OpeningNotificationSent")
                        .HasColumnType("bit");

                    b.Property<int?>("PostQualificationTenderId")
                        .HasColumnType("int");

                    b.Property<int?>("PreQualificationCommitteeId")
                        .HasColumnType("int");

                    b.Property<int?>("PreQualificationId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousFramWorkId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("QualificationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityTableVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReasonForLimitedTenderTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ReasonForPurchaseTenderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SamplesDeliveryAddress")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<int?>("SpendingCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmitionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("SupplierNeedSample")
                        .HasColumnType("bit");

                    b.Property<decimal>("TechnicalAdministrativeCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TechnicalOrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateYears")
                        .HasColumnType("int");

                    b.Property<bool?>("TenderAwardingType")
                        .HasColumnType("bit");

                    b.Property<int?>("TenderConditionsTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("TenderFirstStageId")
                        .HasColumnType("int");

                    b.Property<string>("TenderName")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("TenderNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("TenderPointsToPass")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TenderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TenderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenderTypeOtherSelectionReason")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("TenderUnitStatusId")
                        .HasColumnType("int");

                    b.Property<bool?>("UnitSpacialistWouldLikeToAttendTheCommitte")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("VROCommitteeId")
                        .HasColumnType("int");

                    b.Property<int?>("VRORelatedBranchId")
                        .HasColumnType("int");

                    b.HasKey("TenderId");

                    b.HasIndex("AgencyCode");

                    b.HasIndex("AgreementTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ConditionTemplateStageStatusId");

                    b.HasIndex("ConditionsBookletDeliveryAddressId");

                    b.HasIndex("CreatedByTypeId");

                    b.HasIndex("DirectPurchaseCommitteeId");

                    b.HasIndex("InvitationTypeId");

                    b.HasIndex("OfferPresentationWayId");

                    b.HasIndex("OffersCheckingCommitteeId");

                    b.HasIndex("OffersOpeningAddressId");

                    b.HasIndex("OffersOpeningCommitteeId");

                    b.HasIndex("PostQualificationTenderId");

                    b.HasIndex("PreQualificationCommitteeId");

                    b.HasIndex("PreQualificationId");

                    b.HasIndex("PreviousFramWorkId");

                    b.HasIndex("QualificationTypeId");

                    b.HasIndex("ReasonForLimitedTenderTypeId");

                    b.HasIndex("ReasonForPurchaseTenderTypeId");

                    b.HasIndex("SpendingCategoryId");

                    b.HasIndex("TechnicalOrganizationId");

                    b.HasIndex("TenderConditionsTemplateId")
                        .IsUnique()
                        .HasFilter("[TenderConditionsTemplateId] IS NOT NULL");

                    b.HasIndex("TenderFirstStageId");

                    b.HasIndex("TenderStatusId");

                    b.HasIndex("TenderTypeId");

                    b.HasIndex("TenderUnitStatusId");

                    b.HasIndex("VROCommitteeId");

                    b.HasIndex("VRORelatedBranchId");

                    b.ToTable("Tender","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderAction", b =>
                {
                    b.Property<int>("TenderActionId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("TenderActionId");

                    b.ToTable("TenderAction","LookUps");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderActivity", b =>
                {
                    b.Property<int>("TenderActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderActivity","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderAgreementAgency", b =>
                {
                    b.Property<int>("TenderAgreementAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderAgreementAgencyId");

                    b.HasIndex("AgencyCode");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderAgreementAgency","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderArea","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderAttachment", b =>
                {
                    b.Property<int>("TenderAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ChangeStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FileNetReferenceId")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("ReviewStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderAttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("TenderId");

                    b.ToTable("Attachment","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderAttachmentChanges", b =>
                {
                    b.Property<int>("TenderAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("DeletedAttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("FileNetReferenceId")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("TenderChangeRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderAttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("DeletedAttachmentId");

                    b.HasIndex("TenderChangeRequestId");

                    b.ToTable("AttachmentChanges","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderAwardingHistory", b =>
                {
                    b.Property<int>("TenderAwardingHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AwardingIndex")
                        .HasColumnType("int");

                    b.Property<decimal?>("AwardingValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CommercialRegisterationNumber")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("TenderAwardingType")
                        .HasColumnType("bit");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderAwardingHistoryId");

                    b.HasIndex("CommercialRegisterationNumber");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderAwardingHistory","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderChangeRequest", b =>
                {
                    b.Property<int>("TenderChangeRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancelationReasonDescription")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("CancelationReasonId")
                        .HasColumnType("int");

                    b.Property<int>("ChangeRequestStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ChangeRequestTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("HasAlternativeOffer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestedByRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderChangeRequestId");

                    b.HasIndex("CancelationReasonId");

                    b.HasIndex("ChangeRequestStatusId");

                    b.HasIndex("ChangeRequestTypeId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderChangeRequest","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplate", b =>
                {
                    b.Property<int>("TenderConditionsTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyDecalration")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("AgentEmail")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AgentFax")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("AgentJob")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("AgentName")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("AgentPhone")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("AllowancePeriodToAddOffersIfNotAddedBeofre")
                        .HasColumnType("int");

                    b.Property<int?>("AllowedOfferSiningDays")
                        .HasColumnType("int");

                    b.Property<string>("AlternativeEmailForCommuncation")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ApplyOffersTemplateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirimJoiningTheTender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractBasedOnPerformanceDetails")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentsSpecifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialOfferDocuments")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool>("HideCerificatesIDs")
                        .HasColumnType("bit");

                    b.Property<bool>("HideTechnicalDocumentSections")
                        .HasColumnType("bit");

                    b.Property<bool>("HideTenderFragmentation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialsSpecifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxTimeToAnswerQuestions")
                        .HasColumnType("int");

                    b.Property<string>("ProjectsScope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualitySpecifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RemoveHowToApplyTechnicalAndFinancialOffersSectionWay")
                        .HasColumnType("bit");

                    b.Property<string>("SafetySpecifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServicesAndWorkImplementationsMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicalOfferDocuments")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int?>("TenderConditionsTemplateMaterialInofmrationId")
                        .HasColumnType("int");

                    b.Property<string>("TenderFragmentation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("WorkLocationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkforceSpecifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorksProgram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WritePrice")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenderConditionsTemplateId");

                    b.HasIndex("TenderConditionsTemplateMaterialInofmrationId")
                        .IsUnique()
                        .HasFilter("[TenderConditionsTemplateMaterialInofmrationId] IS NOT NULL");

                    b.ToTable("TenderConditionsTemplate","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplateMaterialInofmration", b =>
                {
                    b.Property<int>("TenderConditionsTemplateMaterialInofmrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BasicInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Guarantee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntilizationAndStartWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MachineGuarantee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineMaintanance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maintanance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredDcoumentationAfter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredDcoumentationBefore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trainging")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderConditionsTemplateMaterialInofmrationId");

                    b.ToTable("TenderConditionsTemplateMaterialsInofmration","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplateTechnicalDeclration", b =>
                {
                    b.Property<int>("TenderConditionsTemplateTechnicalDeclrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConditionsTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Decleration")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderConditionsTemplateTechnicalDeclrationId");

                    b.HasIndex("ConditionsTemplateId");

                    b.ToTable("TenderConditionsTemplateTechnicalDelrations","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplateTechnicalOutput", b =>
                {
                    b.Property<int>("TenderConditionsTemplateTechnicalOutputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConditionsTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OutputDeliveryTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OutputDescriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("OutputName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("OutputStage")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderConditionsTemplateTechnicalOutputId");

                    b.HasIndex("ConditionsTemplateId");

                    b.ToTable("TenderConditionsTemplateTechnicalOutput","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderConditoinsStatus", b =>
                {
                    b.Property<int>("TenderConditoinsStatusId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("TenderConditoinsStatusId");

                    b.ToTable("TenderConditoinsStatus","LookUps");

                    b.HasData(
                        new
                        {
                            TenderConditoinsStatusId = 1,
                            NameAr = "الأحكام العامة"
                        },
                        new
                        {
                            TenderConditoinsStatusId = 2,
                            NameAr = "إعداد العروض"
                        },
                        new
                        {
                            TenderConditoinsStatusId = 3,
                            NameAr = "تسليم العروض"
                        },
                        new
                        {
                            TenderConditoinsStatusId = 4,
                            NameAr = "تقييم العروض"
                        },
                        new
                        {
                            TenderConditoinsStatusId = 5,
                            NameAr = "متطلبات التعاقد"
                        },
                        new
                        {
                            TenderConditoinsStatusId = 6,
                            NameAr = "التعريفات الفنية"
                        },
                        new
                        {
                            TenderConditoinsStatusId = 7,
                            NameAr = "المواصفات والشروط المطلوبة"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderConstructionWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConstructionWorkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ConstructionWorkId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderConstructionWork","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderCountry","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderFeesType", b =>
                {
                    b.Property<int>("TenderFeesTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("TenderFeesTypeId");

                    b.ToTable("TenderFeesType","Lookups");

                    b.HasData(
                        new
                        {
                            TenderFeesTypeId = 1,
                            NameArabic = "المقابل المالى للدعوة"
                        },
                        new
                        {
                            TenderFeesTypeId = 2,
                            NameArabic = "المقابل المالى لكراسة الشروط"
                        },
                        new
                        {
                            TenderFeesTypeId = 3,
                            NameArabic = "قيمة كراسة الشروط"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderHistory", b =>
                {
                    b.Property<int>("TenderHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TenderHistoryId");

                    b.HasIndex("ActionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderHistory","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderMaintenanceRunnigWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaintenanceRunningWorkId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceRunningWorkId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderMentainanceRunnigWork","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderPlaintRequestProcedure", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("TenderPlaintRequestProcedure","LookUps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "إعادة فحص العروض"
                        },
                        new
                        {
                            Id = 2,
                            Name = "إعادة فتح الترسية"
                        },
                        new
                        {
                            Id = 3,
                            Name = "أخرى"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderQuantityTable","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTableChanges", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableChangeStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TenderChangeRequestId")
                        .HasColumnType("int");

                    b.Property<long?>("TenderQuantitiesTableId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("TenderChangeRequestId");

                    b.HasIndex("TenderQuantitiesTableId");

                    b.ToTable("TenderQuantityTableChanges","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTableItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityTemplateId")
                        .HasColumnType("int");

                    b.Property<long>("ColumnId")
                        .HasColumnType("bigint");

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("ItemNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenderFormHeaderId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenderQuantityTableId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenderQuantityTableId");

                    b.ToTable("TenderQuantityTableItem","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTableItemChanges", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityTemplateId")
                        .HasColumnType("int");

                    b.Property<long>("ColumnId")
                        .HasColumnType("bigint");

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("ItemNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenderFormHeaderId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenderQuantityTableChangesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenderQuantityTableChangesId");

                    b.ToTable("TenderQuantityTableItemChanges","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderStatus", b =>
                {
                    b.Property<int>("TenderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("TenderStatusId");

                    b.ToTable("TenderStatus","LookUps");

                    b.HasData(
                        new
                        {
                            TenderStatusId = 1,
                            NameAr = "تحت الانشاء"
                        },
                        new
                        {
                            TenderStatusId = 2,
                            NameAr = "تحت التحديث"
                        },
                        new
                        {
                            TenderStatusId = 3,
                            NameAr = "يانتظار الاعتماد"
                        },
                        new
                        {
                            TenderStatusId = 4,
                            NameAr = "معتمده"
                        },
                        new
                        {
                            TenderStatusId = 5,
                            NameAr = "مرفوضة"
                        },
                        new
                        {
                            TenderStatusId = 6,
                            NameAr = "مرحلة فتح العروض"
                        },
                        new
                        {
                            TenderStatusId = 7,
                            NameAr = "بإنتظار إعتماد تقرير فتح العروض"
                        },
                        new
                        {
                            TenderStatusId = 8,
                            NameAr = "تم فتح العروض"
                        },
                        new
                        {
                            TenderStatusId = 9,
                            NameAr = "تم رفض تقرير فتح العروض"
                        },
                        new
                        {
                            TenderStatusId = 10,
                            NameAr = "بانتظار اعتماد تقييم العروض"
                        },
                        new
                        {
                            TenderStatusId = 11,
                            NameAr = "تم إعتماد تقييم العروض"
                        },
                        new
                        {
                            TenderStatusId = 12,
                            NameAr = "تم رفض تقييم العروض"
                        },
                        new
                        {
                            TenderStatusId = 13,
                            NameAr = "مرحلة الترسية"
                        },
                        new
                        {
                            TenderStatusId = 14,
                            NameAr = "بإنتظار إعتماد الترسية"
                        },
                        new
                        {
                            TenderStatusId = 15,
                            NameAr = "تم إعتماد الترسية"
                        },
                        new
                        {
                            TenderStatusId = 16,
                            NameAr = "تم رفض الترسية"
                        },
                        new
                        {
                            TenderStatusId = 17,
                            NameAr = "تم الإلغاء"
                        },
                        new
                        {
                            TenderStatusId = 18,
                            NameAr = "مرحلة فحص العروض"
                        },
                        new
                        {
                            TenderStatusId = 19,
                            NameAr = " مرحلة تقييم وثائق التأهيل"
                        },
                        new
                        {
                            TenderStatusId = 20,
                            NameAr = "بإنتظار اعتماد تقييم وثائق التأهيل"
                        },
                        new
                        {
                            TenderStatusId = 21,
                            NameAr = " تم إعتماد تقييم وثائق التأهيل "
                        },
                        new
                        {
                            TenderStatusId = 22,
                            NameAr = "تم رفض تقييم وثائق التأهيل "
                        },
                        new
                        {
                            TenderStatusId = 23,
                            NameAr = "بانتظار الاعتماد من مركز تحقيق كفاءة الإنفاق"
                        },
                        new
                        {
                            TenderStatusId = 24,
                            NameAr = "تم رفض طرح المنافسة من مركز تحقيق كفاءة الإنفاق "
                        },
                        new
                        {
                            TenderStatusId = 25,
                            NameAr = "بانتظار تأكيد مرحلة فحص عروض الشراء المباشر"
                        },
                        new
                        {
                            TenderStatusId = 26,
                            NameAr = "مرحلة فحص عروض الشراء المباشر"
                        },
                        new
                        {
                            TenderStatusId = 27,
                            NameAr = "بانتظار اعتماد فحص عروض الشراء المباشر"
                        },
                        new
                        {
                            TenderStatusId = 28,
                            NameAr = "بإنتظار اعتماد تقييم العروض الفنية"
                        },
                        new
                        {
                            TenderStatusId = 29,
                            NameAr = " تم إعتماد تقييم العروض الفنية"
                        },
                        new
                        {
                            TenderStatusId = 30,
                            NameAr = "تم رفض تقييم العروض الفنية"
                        },
                        new
                        {
                            TenderStatusId = 31,
                            NameAr = "مرحلة التقييم المالي"
                        },
                        new
                        {
                            TenderStatusId = 32,
                            NameAr = "بإنتظار اعتماد تقييم العروض المالية"
                        },
                        new
                        {
                            TenderStatusId = 33,
                            NameAr = "تم إعتماد تقييم العروض المالية"
                        },
                        new
                        {
                            TenderStatusId = 34,
                            NameAr = "تم رفض تقييم العروض المالية"
                        },
                        new
                        {
                            TenderStatusId = 46,
                            NameAr = "مرحلة فتح العرض المالي"
                        },
                        new
                        {
                            TenderStatusId = 35,
                            NameAr = "تم إعتماد فحص العروض للشراء المباشر"
                        },
                        new
                        {
                            TenderStatusId = 36,
                            NameAr = "تم رفض فحص العروض للشراء المباشر"
                        },
                        new
                        {
                            TenderStatusId = 38,
                            NameAr = "بإنتظار اعتماد الترسية المبدئي "
                        },
                        new
                        {
                            TenderStatusId = 39,
                            NameAr = "تم اعتماد الترسية المبدئي "
                        },
                        new
                        {
                            TenderStatusId = 40,
                            NameAr = "تم رفض الترسية المبدئي "
                        },
                        new
                        {
                            TenderStatusId = 47,
                            NameAr = "معادة للجهة للتعديل "
                        },
                        new
                        {
                            TenderStatusId = 48,
                            NameAr = "مرحلة المزايدة المباشرة"
                        },
                        new
                        {
                            TenderStatusId = 49,
                            NameAr = "انتهاء المزايدة المباشرة"
                        },
                        new
                        {
                            TenderStatusId = 50,
                            NameAr = "بانتظار اعتماد مكتب تحقيق الرؤية"
                        },
                        new
                        {
                            TenderStatusId = 51,
                            NameAr = "مرحلة فتح العروض الفنية"
                        },
                        new
                        {
                            TenderStatusId = 52,
                            NameAr = "بإنتظار اعتماد التقييم الفني"
                        },
                        new
                        {
                            TenderStatusId = 53,
                            NameAr = "تم رفض التقييم الفني"
                        },
                        new
                        {
                            TenderStatusId = 54,
                            NameAr = "مرحلة فحص العروض والتقييم المالي"
                        },
                        new
                        {
                            TenderStatusId = 55,
                            NameAr = "بانتظار إعتماد التقييم المالي"
                        },
                        new
                        {
                            TenderStatusId = 56,
                            NameAr = "تم إعتماد التقييم المالي"
                        },
                        new
                        {
                            TenderStatusId = 57,
                            NameAr = "تم رفض التقييم المالي"
                        },
                        new
                        {
                            TenderStatusId = 58,
                            NameAr = "تم إعتماد التقييم الفني"
                        },
                        new
                        {
                            TenderStatusId = 59,
                            NameAr = "مرحلة فتح العروض المالية"
                        },
                        new
                        {
                            TenderStatusId = 60,
                            NameAr = "مرحلة فحص العروض والتقييم الفني"
                        },
                        new
                        {
                            TenderStatusId = 73,
                            NameAr = "تحت الإنشاء"
                        },
                        new
                        {
                            TenderStatusId = 70,
                            NameAr = "بإنتظار موافقة اللجنة"
                        },
                        new
                        {
                            TenderStatusId = 71,
                            NameAr = "بإنتظار الأعتماد"
                        },
                        new
                        {
                            TenderStatusId = 72,
                            NameAr = "مرفوضة"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderType", b =>
                {
                    b.Property<int>("TenderTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("BuyingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal>("InvitationCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderTypeId");

                    b.ToTable("TenderType","LookUps");

                    b.HasData(
                        new
                        {
                            TenderTypeId = 1,
                            BuyingCost = 500.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(65),
                            InvitationCost = 200.0m,
                            NameAr = " منافسة عامة (جديد)"
                        },
                        new
                        {
                            TenderTypeId = 2,
                            BuyingCost = 0.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2199),
                            InvitationCost = 200.0m,
                            NameAr = "شراء مباشر (جديد)"
                        },
                        new
                        {
                            TenderTypeId = 3,
                            BuyingCost = 0.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2245),
                            InvitationCost = 0.0m,
                            NameAr = "تأهيل مسبق"
                        },
                        new
                        {
                            TenderTypeId = 4,
                            BuyingCost = 0.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2248),
                            InvitationCost = 200.0m,
                            NameAr = "منافسة محدودة"
                        },
                        new
                        {
                            TenderTypeId = 5,
                            BuyingCost = 500.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2251),
                            InvitationCost = 200.0m,
                            NameAr = "المزايدة العكسية الإلكترونية"
                        },
                        new
                        {
                            TenderTypeId = 6,
                            BuyingCost = 500.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2253),
                            InvitationCost = 200.0m,
                            NameAr = "المنافسة على مرحلتين(المرحلة الاولى)"
                        },
                        new
                        {
                            TenderTypeId = 7,
                            BuyingCost = 0.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2256),
                            InvitationCost = 0.0m,
                            NameAr = "المنافسة على مرحلتين(المرحلة الثانية)"
                        },
                        new
                        {
                            TenderTypeId = 8,
                            BuyingCost = 0.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2259),
                            InvitationCost = 0.0m,
                            NameAr = "تأهيل لاحق"
                        },
                        new
                        {
                            TenderTypeId = 9,
                            BuyingCost = 500.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2261),
                            InvitationCost = 200.0m,
                            NameAr = "منافسة عامة (النظام القديم)"
                        },
                        new
                        {
                            TenderTypeId = 10,
                            BuyingCost = 0.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2264),
                            InvitationCost = 200.0m,
                            NameAr = "شراء مباشر (النظام القديم)"
                        },
                        new
                        {
                            TenderTypeId = 11,
                            BuyingCost = 500.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2266),
                            InvitationCost = 0.0m,
                            NameAr = "منافسة اتفاقية اطارية"
                        },
                        new
                        {
                            TenderTypeId = 12,
                            BuyingCost = 200.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2269),
                            InvitationCost = 200.0m,
                            NameAr = "مسابقة"
                        },
                        new
                        {
                            TenderTypeId = 13,
                            BuyingCost = 0.0m,
                            CreatedAt = new DateTime(2020, 5, 12, 1, 51, 12, 502, DateTimeKind.Local).AddTicks(2272),
                            InvitationCost = 0.0m,
                            NameAr = "مشاريع التحول الوطني"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderUnitAssign", b =>
                {
                    b.Property<int>("TenderUnitAssignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrentlyAssigned")
                        .HasColumnType("bit");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<int>("UnitSpecialistLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("TenderUnitAssignId");

                    b.HasIndex("TenderId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("TenderUnitAssign","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderUnitStatus", b =>
                {
                    b.Property<int>("TenderUnitStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("TenderUnitStatusId");

                    b.ToTable("TenderUnitStatus","LookUps");

                    b.HasData(
                        new
                        {
                            TenderUnitStatusId = 1,
                            Name = "بإنتظار مراجعة مختص  مركز تحقيق كفاءة الإنفاق"
                        },
                        new
                        {
                            TenderUnitStatusId = 6,
                            Name = "  تحت المراجعة المستوى الأول"
                        },
                        new
                        {
                            TenderUnitStatusId = 7,
                            Name = " معادة للجهة الحكومية للتعديل"
                        },
                        new
                        {
                            TenderUnitStatusId = 8,
                            Name = " تم تحويلها للمستوى الثاني"
                        },
                        new
                        {
                            TenderUnitStatusId = 9,
                            Name = " تحت المراجعة المستوى الثاني"
                        },
                        new
                        {
                            TenderUnitStatusId = 2,
                            Name = "تحت المراجعة"
                        },
                        new
                        {
                            TenderUnitStatusId = 3,
                            Name = "بإنتظار إعتماد رئيس مركز تحقيق كفاءة الإنفاق"
                        },
                        new
                        {
                            TenderUnitStatusId = 4,
                            Name = "تم قبول الإعتماد"
                        },
                        new
                        {
                            TenderUnitStatusId = 5,
                            Name = "تم رفض اعتماد القرار"
                        },
                        new
                        {
                            TenderUnitStatusId = 10,
                            Name = "تحت مراجعة رئيس مركز تحقيق كفاءة الإنفاق"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderUnitStatusesHistory", b =>
                {
                    b.Property<int>("TenderUnitStatusesHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal?>("EstimatedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<int>("TenderUnitStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TenderUnitUpdateTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("TenderUnitStatusesHistoryId");

                    b.HasIndex("TenderId");

                    b.HasIndex("TenderUnitStatusId");

                    b.HasIndex("TenderUnitUpdateTypeId");

                    b.ToTable("TenderUnitStatusesHistory","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderUnitUpdateType", b =>
                {
                    b.Property<int>("TenderUnitUpdateTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("TenderUnitUpdateTypeId");

                    b.ToTable("TenderUnitUpdateType","LookUps");

                    b.HasData(
                        new
                        {
                            TenderUnitUpdateTypeId = 1,
                            Name = "المعلومات الأساسية"
                        },
                        new
                        {
                            TenderUnitUpdateTypeId = 2,
                            Name = "التواريخ"
                        },
                        new
                        {
                            TenderUnitUpdateTypeId = 3,
                            Name = "مجال التصنيف وموقع التنفيذ"
                        },
                        new
                        {
                            TenderUnitUpdateTypeId = 4,
                            Name = "نشاط المنافسة"
                        },
                        new
                        {
                            TenderUnitUpdateTypeId = 5,
                            Name = "جدول الكميات"
                        },
                        new
                        {
                            TenderUnitUpdateTypeId = 6,
                            Name = "كراسة الشروط والمواصفات"
                        },
                        new
                        {
                            TenderUnitUpdateTypeId = 7,
                            Name = "متطلبات المحتوى المحلي"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.UnRegisteredSuppliersInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CrNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2056)")
                        .HasMaxLength(2056);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("InvitationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("InvitationTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("InvitationStatusId");

                    b.HasIndex("TenderId");

                    b.ToTable("UnRegisteredSuppliersInvitation","Invitation");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.UserNotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cr")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("Email")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArabic")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationCodeId")
                        .HasColumnType("int");

                    b.Property<string>("OperationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sms")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cr");

                    b.HasIndex("NotificationCodeId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserNotificationSetting","Notification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("DefaultUserRole")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("UserProfile","IDM");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayNameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("DisplayNameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRole","LookUps");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            DisplayNameAr = "مدخل بيانات المنافسة",
                            DisplayNameEn = "DataEntry",
                            Name = "NewMonafasat_DataEntry"
                        },
                        new
                        {
                            UserRoleId = 2,
                            DisplayNameAr = "خدمة عملاء",
                            DisplayNameEn = "Customer Service",
                            Name = "NewMonafasat_CustomerService"
                        },
                        new
                        {
                            UserRoleId = 3,
                            DisplayNameAr = "مدقق بيانات المنافسة",
                            DisplayNameEn = "Auditor",
                            Name = "NewMonafasat_Auditer"
                        },
                        new
                        {
                            UserRoleId = 4,
                            DisplayNameAr = "مورد",
                            DisplayNameEn = "Supplier",
                            Name = "NewMonafasat_Supplier"
                        },
                        new
                        {
                            UserRoleId = 5,
                            DisplayNameAr = "رئيس لجنة فتح العروض",
                            DisplayNameEn = "Open Manager",
                            Name = "NewMonafasat_OffersOpeningManager"
                        },
                        new
                        {
                            UserRoleId = 6,
                            DisplayNameAr = "سكرتير لجنة فتح العروض",
                            DisplayNameEn = "Open Secretary",
                            Name = "NewMonafasat_OffersOpeningSecretary"
                        },
                        new
                        {
                            UserRoleId = 7,
                            DisplayNameAr = "رئيس لجنة فحص العروض",
                            DisplayNameEn = "Check Manager",
                            Name = "NewMonafasat_OffersCheckManager"
                        },
                        new
                        {
                            UserRoleId = 8,
                            DisplayNameAr = "سكرتير لجنة فحص العروض",
                            DisplayNameEn = "Check Secretary",
                            Name = "NewMonafasat_OffersCheckSecretary"
                        },
                        new
                        {
                            UserRoleId = 9,
                            DisplayNameAr = "مسؤول الجهة الفنية",
                            DisplayNameEn = "Technical Committee User",
                            Name = "NewMonafasat_TechnicalCommitteeUser"
                        },
                        new
                        {
                            UserRoleId = 10,
                            DisplayNameAr = "مدير حساب منافسات بإعتماد",
                            DisplayNameEn = "Account Manager",
                            Name = "NewMonafasat_AccountManager"
                        },
                        new
                        {
                            UserRoleId = 11,
                            DisplayNameAr = "لجنة المنع (منافسات)",
                            DisplayNameEn = "Block Specialist",
                            Name = "NewMonafasat_ManagerBlockCommittee"
                        },
                        new
                        {
                            UserRoleId = 12,
                            DisplayNameAr = "مدير منافسات",
                            DisplayNameEn = "Monafasat Admin",
                            Name = "NewMonafasat_Admin"
                        },
                        new
                        {
                            UserRoleId = 20,
                            DisplayNameAr = "رئيس مركز تحقيق كفاءة الإنفاق",
                            DisplayNameEn = "Achieving Efficient Spending Center Manager",
                            Name = "NewMonafasat_UnitManager"
                        },
                        new
                        {
                            UserRoleId = 21,
                            DisplayNameAr = "مختص مستوى أول مركز تحقيق كفاءة الإنفاق",
                            DisplayNameEn = "Achieving Efficient Spending Center Specialist 1",
                            Name = "NewMonafasat_UnitSpecialistLevel1"
                        },
                        new
                        {
                            UserRoleId = 22,
                            DisplayNameAr = "مختص مستوى ثاني مركز تحقيق كفاءة الإنفاق",
                            DisplayNameEn = "Achieving Efficient Spending Center Specialist 2",
                            Name = "NewMonafasat_UnitSpecialistLevel2"
                        },
                        new
                        {
                            UserRoleId = 23,
                            DisplayNameAr = "رئيس لجنة الشراء المباشر",
                            DisplayNameEn = "Direct Purchase Check Manager",
                            Name = "NewMonafasat_ManagerDirtectPurshasingCommittee"
                        },
                        new
                        {
                            UserRoleId = 24,
                            DisplayNameAr = "سكرتير لجنة الشراء المباشر",
                            DisplayNameEn = "Direct Purchase Check Secretary",
                            Name = "NewMonafasat_SecretaryDirtectPurshasingCommittee"
                        },
                        new
                        {
                            UserRoleId = 25,
                            DisplayNameAr = "اعتماد ترسية المنافسة لصاحب الصلاحية",
                            DisplayNameEn = "Approve Tender Awarding",
                            Name = "NewMonafasat_ApproveTenderAward"
                        },
                        new
                        {
                            UserRoleId = 26,
                            DisplayNameAr = "سكرتير منع",
                            DisplayNameEn = "Block Secretary",
                            Name = "NewMonafasat_SecretaryBlockCommittee"
                        },
                        new
                        {
                            UserRoleId = 27,
                            DisplayNameAr = "رئيس لجنة النظر فى التظلم",
                            DisplayNameEn = "Manager Grievance Committee",
                            Name = "NewMonafasat_ManagerGrievanceCommittee"
                        },
                        new
                        {
                            UserRoleId = 28,
                            DisplayNameAr = "سكرتير لجنة النظر فى التظلم",
                            DisplayNameEn = "Secretary Grievance Committee",
                            Name = "NewMonafasat_SecretaryGrievanceCommittee"
                        },
                        new
                        {
                            UserRoleId = 29,
                            DisplayNameAr = "رئيس لجنة التأهيل",
                            DisplayNameEn = "PreQualification Check  Manager",
                            Name = "NewMonafasat_PreQualificationCommitteeManager"
                        },
                        new
                        {
                            UserRoleId = 30,
                            DisplayNameAr = "سكرتير لجنة التأهيل",
                            DisplayNameEn = "PreQualification Check Secretary",
                            Name = "NewMonafasat_PreQualificationCommitteeSecretary"
                        },
                        new
                        {
                            UserRoleId = 31,
                            DisplayNameAr = "مسئول التخطبيط المسبق",
                            DisplayNameEn = "Planning Officer",
                            Name = "NewMonafasat_PlanningOfficer"
                        },
                        new
                        {
                            UserRoleId = 32,
                            DisplayNameAr = "مدقق التخطيط المسبق",
                            DisplayNameEn = "Planning Approver",
                            Name = "NewMonafasat_PlanningApprover"
                        },
                        new
                        {
                            UserRoleId = 33,
                            DisplayNameAr = "صاحب صلاحية ادارة أعمال  مركز تحقيق كفاءة الإنفاق",
                            DisplayNameEn = "Unit Business Management",
                            Name = "NewMonafasat_UnitBusinessManagement"
                        },
                        new
                        {
                            UserRoleId = 34,
                            DisplayNameAr = "رئيس لجنة فتح و فحص العروض",
                            DisplayNameEn = "Offers Opening And Check Manager",
                            Name = "NewMonafasat_OffersOpeningAndCheckManager"
                        },
                        new
                        {
                            UserRoleId = 35,
                            DisplayNameAr = "سكرتير لجنة فتح و فحص العروض",
                            DisplayNameEn = "Offers Opening And Check Secretary",
                            Name = "NewMonafasat_OffersOpeningAndCheckSecretary"
                        },
                        new
                        {
                            UserRoleId = 36,
                            DisplayNameAr = "مسؤول اعتماد",
                            DisplayNameEn = "Etimad Officer",
                            Name = "NewMonafasat_EtimadOfficer"
                        },
                        new
                        {
                            UserRoleId = 37,
                            DisplayNameAr = "أخصائي مشتريات",
                            DisplayNameEn = "Purshase Specialist",
                            Name = "NewMonafasat_PurshaseSpecialist"
                        },
                        new
                        {
                            UserRoleId = 38,
                            DisplayNameAr = "مختص ادارة الحسابات",
                            DisplayNameEn = "Accounts Management Specialist",
                            Name = "NewMonafasat_AccountsManagementSpecialist"
                        },
                        new
                        {
                            UserRoleId = 39,
                            DisplayNameAr = "مدير إدارة المنتجات - تعديل",
                            DisplayNameEn = "Product Manager - Edit",
                            Name = "NewMonafasat_ProductionManager"
                        },
                        new
                        {
                            UserRoleId = 40,
                            DisplayNameAr = "مدير إدارة المنتجات - عرض",
                            DisplayNameEn = "Product Manager - Display",
                            Name = "NewMonafasat_ProductionManagerDisplay"
                        },
                        new
                        {
                            UserRoleId = 41,
                            DisplayNameAr = "مسؤول منتجات القائمة الإلزامية",
                            DisplayNameEn = "Mandatory List Officer",
                            Name = "LC_ProductsOfficer"
                        },
                        new
                        {
                            UserRoleId = 42,
                            DisplayNameAr = "معتمد منتجات القائمة الإلزامية",
                            DisplayNameEn = "Mandatory List Approver",
                            Name = "LC_ProductsApprover"
                        },
                        new
                        {
                            UserRoleId = 43,
                            DisplayNameAr = "مسؤول متطلبات المحتوى المحلي",
                            DisplayNameEn = "Local Content Officer",
                            Name = "NewMonafasat_LocalContentOfficer"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.VacationsDate", b =>
                {
                    b.Property<int>("VacationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("VacationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VacationName")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("VacationId");

                    b.ToTable("VacationsDate","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.VendorCertificates", b =>
                {
                    b.Property<int>("VendorCertificateId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("VendorCertificateId");

                    b.ToTable("VendorCertificate","LookUps");

                    b.HasData(
                        new
                        {
                            VendorCertificateId = 1,
                            NameAr = "السجل التجاري",
                            NameEn = "Commercial Registery"
                        },
                        new
                        {
                            VendorCertificateId = 2,
                            NameAr = "تصنيف المقاولين",
                            NameEn = "contractor Classification"
                        },
                        new
                        {
                            VendorCertificateId = 3,
                            NameAr = "شهادة الزكاة",
                            NameEn = "Zakat Certificate"
                        },
                        new
                        {
                            VendorCertificateId = 4,
                            NameAr = "شهادة الضريبة",
                            NameEn = "taxes Certificate"
                        },
                        new
                        {
                            VendorCertificateId = 5,
                            NameAr = "التأمينات الإجتماعية",
                            NameEn = "Social Insurance"
                        },
                        new
                        {
                            VendorCertificateId = 6,
                            NameAr = "شهادة اشتراك الغرفة التجارية",
                            NameEn = "Commercial Chamber Participation"
                        },
                        new
                        {
                            VendorCertificateId = 7,
                            NameAr = "رخصة الإستثمار",
                            NameEn = "Investigation licence"
                        },
                        new
                        {
                            VendorCertificateId = 8,
                            NameAr = "شهادة السعودة",
                            NameEn = "Saudization Certificate"
                        },
                        new
                        {
                            VendorCertificateId = 9,
                            NameAr = "رخصة البلدية",
                            NameEn = "Muncipality Registery"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.VerificationCode", b =>
                {
                    b.Property<int>("VerificationCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCodeNo")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("VerificationTypeId")
                        .HasColumnType("int");

                    b.HasKey("VerificationCodeId");

                    b.HasIndex("VerificationTypeId");

                    b.ToTable("VerificationCode","Verification");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.VerificationType", b =>
                {
                    b.Property<int>("VerificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VerificationTypeName")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("VerificationTypeId");

                    b.ToTable("VerificationType","Verification");

                    b.HasData(
                        new
                        {
                            VerificationTypeId = 1,
                            VerificationTypeName = "منافسه"
                        },
                        new
                        {
                            VerificationTypeId = 2,
                            VerificationTypeName = "منع"
                        },
                        new
                        {
                            VerificationTypeId = 4,
                            VerificationTypeName = "قبل التخطيط"
                        },
                        new
                        {
                            VerificationTypeId = 3,
                            VerificationTypeName = "تواصل الجهه"
                        },
                        new
                        {
                            VerificationTypeId = 5,
                            VerificationTypeName = "التفاوض"
                        },
                        new
                        {
                            VerificationTypeId = 6,
                            VerificationTypeName = "القائمة الالزامية"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.YearQuarter", b =>
                {
                    b.Property<int>("YearQuarterId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("YearQuarterId");

                    b.ToTable("YearQuarter","Lookups");

                    b.HasData(
                        new
                        {
                            YearQuarterId = 1,
                            NameAr = "الربع الأول",
                            NameEn = "First Quarter"
                        },
                        new
                        {
                            YearQuarterId = 2,
                            NameAr = "الربع الثانى",
                            NameEn = "Second Quarter"
                        },
                        new
                        {
                            YearQuarterId = 3,
                            NameAr = "الربع الثالث",
                            NameEn = "Third Quarter"
                        },
                        new
                        {
                            YearQuarterId = 4,
                            NameAr = "الربع الرابع",
                            NameEn = "Fourth Quarter"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.EscalationRequest", b =>
                {
                    b.Property<int>("EscalationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("EscalationNotes")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PlaintRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("EscalationRequestId");

                    b.HasIndex("PlaintRequestId")
                        .IsUnique();

                    b.ToTable("EscalationRequest","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.GovAgency", b =>
                {
                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("AgencyLogoReferenceId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOldSystem")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUGP")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVRO")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PurchaseMethods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("VROOfficeCode")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AgencyCode");

                    b.HasIndex("VROOfficeCode");

                    b.ToTable("GovAgency","IDM");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.OfferPresentationWay", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("OfferPresentationWay","Lookups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ملف واحد للعرض الفني والمالي معا  "
                        },
                        new
                        {
                            Id = 2,
                            Name = "  ملفين منفصلين ( فني ومالي) "
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.PlaintRequest", b =>
                {
                    b.Property<int>("PlainRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyCommunicationRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEscalation")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("PlaintReason")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("PlainRequestId");

                    b.HasIndex("AgencyCommunicationRequestId");

                    b.HasIndex("OfferId");

                    b.ToTable("PlaintRequest","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.PlaintRequestNotification", b =>
                {
                    b.Property<int>("PlaintRequestNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommunicationRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("PlaintRequestNotificationId");

                    b.HasIndex("CommunicationRequestId")
                        .IsUnique();

                    b.ToTable("PlaintRequestNotification","CommunicationRequest");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.ReasonForLimitedTenderType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("ReasonForLimitedTenderType","Lookups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " اعمال مشتريات التي  لا تتوفر إلا لدى عدد محدود من المقاولين أو الموردين أو المتعهدين "
                        },
                        new
                        {
                            Id = 2,
                            Name = " أعمال ومشتريات التي  تبلغ قيمتها التقديرية خمسمائة ألف ريال فأق"
                        },
                        new
                        {
                            Id = 3,
                            Name = "الأعمال والمشتريات  المطلوبة عاجلا "
                        },
                        new
                        {
                            Id = 4,
                            Name = "أعمال ومشتريات تقدم  من قبل الكيانات الغير ربحية "
                        },
                        new
                        {
                            Id = 5,
                            Name = "أخرى )"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.ReasonForPurchaseTenderType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("ReasonForPurchaseTenderType","Lookups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " اعمال ومشتريات الأسلحة والمعدات العسكرية وقطع غيارها "
                        },
                        new
                        {
                            Id = 2,
                            Name = " الأعمال والمشتريات متوافرة لدى متعهد أو مقاول أو مورد واحد، ولم يكن لها بديل مقبول "
                        },
                        new
                        {
                            Id = 3,
                            Name = " التكلفة التقديرية للأعمال والمشتريات لا تتجاوز مبلغ مائة ألف ريال  "
                        },
                        new
                        {
                            Id = 4,
                            Name = " استخدام هذا  الأسلوب ضروريا لحماية مصالح الأمن الوطني  "
                        },
                        new
                        {
                            Id = 5,
                            Name = " أعمال ومشتريات  متوفرة لدى كيان غير ربحي واحد "
                        },
                        new
                        {
                            Id = 6,
                            Name = "حالة طارئة "
                        },
                        new
                        {
                            Id = 7,
                            Name = "أخرى )"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Supplier", b =>
                {
                    b.Property<string>("SelectedCr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SelectedCrName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("SelectedCr");

                    b.ToTable("Supplier","IDM");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.SupplierBlock", b =>
                {
                    b.Property<int>("SupplierBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminBlockReason")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AdminFileName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("AdminFileNetReferenceId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("BlockDetails")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("BlockEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BlockStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BlockStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("BlockTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CommercialRegistrationNo")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CommercialRegistrationNoOrigin")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CommercialSupplierName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("CommertialRegistrationNoOrigin")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOldBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTotallyBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ManagerRejectionReason")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Punishment")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ResolutionNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("SecretaryBlockReason")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("SecretaryFileName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SecretaryFileNetReferenceId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SecretaryRejectionReason")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SupplierTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("SupplierBlockId");

                    b.HasIndex("AgencyCode");

                    b.HasIndex("BlockStatusId");

                    b.HasIndex("BlockTypeId");

                    b.HasIndex("CommercialRegistrationNo");

                    b.ToTable("SupplierBlock","Block");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.SupplierUserProfile", b =>
                {
                    b.Property<string>("SelectedCr")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("SelectedCr", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("SupplierUserProfile","IDM");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.TenderCreatedByType", b =>
                {
                    b.Property<int>("TenderCreatedByTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("TenderCreatedByTypeId");

                    b.ToTable("TenderCreatedByType","LookUps");

                    b.HasData(
                        new
                        {
                            TenderCreatedByTypeId = 1,
                            NameAr = "مكتب تحقيق الرؤية"
                        },
                        new
                        {
                            TenderCreatedByTypeId = 2,
                            NameAr = "جهة مرتبطة بمكتب تحقيق الرؤية"
                        },
                        new
                        {
                            TenderCreatedByTypeId = 3,
                            NameAr = "جهات مستثناة"
                        });
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.TenderDatesChange", b =>
                {
                    b.Property<int>("RevisionDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastEnqueriesDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastOfferPresentationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastOfferPresentationTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OffersCheckingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OffersCheckingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OffersOpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OffersOpeningTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TenderChangeRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("RevisionDateId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TenderChangeRequestId");

                    b.ToTable("TenderDatesChanges","Tender");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.UserAgencyRole", b =>
                {
                    b.Property<int>("UserAgencyRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("UserAgencyRoleID");

                    b.HasIndex("AgencyCode");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserAgencyRole","IDM");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.UserAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Process")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_UserAudit","dbo");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Data.SP_GenerateReferenceNumber", b =>
                {
                    b.Property<string>("ReferenceNumberSequence")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SP_GenerateReferenceNumber");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.NotificationEmail", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.BaseNotification");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Notification","Notification");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.NotificationPanel", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.BaseNotification");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CommitteeId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnName("NotificationPanel_Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnName("NotificationPanel_Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Notification","Notification");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.NotificationSMS", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.BaseNotification");

                    b.Property<string>("Content")
                        .HasColumnName("NotificationSMS_Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentMobile")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Notification","Notification");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationFirstStage", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.Negotiation");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountLetterRefID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNumber")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Negotiation","CommunicationRequest");

                    b.HasDiscriminator().HasValue(15);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationSecondStage", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.Negotiation");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSupplierAgree")
                        .HasColumnType("bit");

                    b.Property<int>("NegotiationFirstStageId")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PeriodStartDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("NegotiationFirstStageId");

                    b.HasIndex("OfferId");

                    b.ToTable("Negotiation","CommunicationRequest");

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierBankGuaranteeAttachment", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.SupplierAttachment");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int?>("GuaranteeDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("GuaranteeEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuaranteeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("GuaranteeStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsBankGuaranteeValid")
                        .HasColumnType("bit");

                    b.HasIndex("BankId");

                    b.ToTable("SupplierAttachment","Offer");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierCombinedAttachment", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.SupplierAttachment");

                    b.ToTable("SupplierAttachment","Offer");

                    b.HasDiscriminator().HasValue(17);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierFinancialProposalAttachment", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.SupplierAttachment");

                    b.ToTable("SupplierAttachment","Offer");

                    b.HasDiscriminator().HasValue(18);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierFinancialandTechnicalProposalAttachment", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.SupplierAttachment");

                    b.ToTable("SupplierAttachment","Offer");

                    b.HasDiscriminator().HasValue(27);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierOriginalAttachment", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.SupplierAttachment");

                    b.ToTable("SupplierAttachment","Offer");

                    b.HasDiscriminator().HasValue(15);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierSpecificationAttachment", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.SupplierAttachment");

                    b.Property<int?>("ConstructionWorkId")
                        .HasColumnType("int");

                    b.Property<int?>("Degree")
                        .HasColumnType("int");

                    b.Property<bool?>("IsForApplier")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<int?>("MaintenanceRunningWorkId")
                        .HasColumnType("int");

                    b.HasIndex("ConstructionWorkId");

                    b.HasIndex("MaintenanceRunningWorkId");

                    b.ToTable("SupplierAttachment","Offer");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierTechnicalProposalAttachment", b =>
                {
                    b.HasBaseType("MOF.Etimad.Monafasat.Core.Entities.SupplierAttachment");

                    b.ToTable("SupplierAttachment","Offer");

                    b.HasDiscriminator().HasValue(19);
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Activity", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ActivityTemplate", "Activitytemplate")
                        .WithMany()
                        .HasForeignKey("ActivitytemplateID");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Activity", "ParentActivity")
                        .WithMany("SubActivities")
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Address", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AgencyBudgetNumber", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("AgencyBudgetNumbers")
                        .HasForeignKey("TenderId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequest", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequestType", "AgencyRequestType")
                        .WithMany()
                        .HasForeignKey("AgencyRequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationPlaintStatus", "EscalationAcceptanceStatus")
                        .WithMany()
                        .HasForeignKey("EscalationAcceptanceStatusId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequestStatus", "EscalationStatus")
                        .WithMany()
                        .HasForeignKey("EscalationStatusId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationPlaintStatus", "PlaintAcceptanceStatus")
                        .WithMany()
                        .HasForeignKey("PlaintAcceptanceStatusId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.SupplierExtendOfferDatesRequest", "SupplierExtendOfferDatesRequest")
                        .WithMany()
                        .HasForeignKey("SupplierExtendOfferDatesRequestId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("AgencyCommunicationRequests")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderPlaintRequestProcedure", "TenderPlaintRequestProcedure")
                        .WithMany()
                        .HasForeignKey("TenderPlaintRequestProcedureId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Announcement", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.GovAgency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyCode");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.ReasonForPurchaseTenderType", "ReasonForPurchaseTenderType")
                        .WithMany()
                        .HasForeignKey("ReasonForSelectingTenderTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AnnouncementStatus", "AnnouncementStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderType", "TenderType")
                        .WithMany()
                        .HasForeignKey("TenderTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementActivity", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Announcement", "Announcement")
                        .WithMany("AnnouncementActivities")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementArea", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Announcement", "Announcement")
                        .WithMany("AnnouncementAreas")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementConstructionWork", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Announcement", "Announcement")
                        .WithMany("AnnouncementConstructionWorks")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ConstructionWork", "ConstructionWork")
                        .WithMany()
                        .HasForeignKey("ConstructionWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementCountry", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Announcement", "Announcement")
                        .WithMany("AnnouncementCountries")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementHistory", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Announcement", "Announcement")
                        .WithMany("AnnouncementHistories")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AnnouncementStatus", "AnnouncementStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.AnnouncementMaintenanceRunnigWork", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Announcement", "Announcement")
                        .WithMany("AnnouncementMaintenanceRunnigWorks")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.MaintenanceRunningWork", "MaintenanceRunningWork")
                        .WithMany()
                        .HasForeignKey("MaintenanceRunningWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BaseNotification", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("CR");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.NotifacationStatusEntity", "NotifacationStatusEntity")
                        .WithMany()
                        .HasForeignKey("NotifacationStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserNotificationSetting", "NotificationSetting")
                        .WithMany()
                        .HasForeignKey("NotificationSettingId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserProfile", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BiddingRound", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.BiddingRoundStatus", "BiddingRoundStatus")
                        .WithMany()
                        .HasForeignKey("BiddingRoundStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("BiddingRounds")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BiddingRoundOffer", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.BiddingRound", "BiddingRound")
                        .WithMany("BiddingRoundOffers")
                        .HasForeignKey("BiddingRoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BillInfo", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.BillStatus", "BillStatus")
                        .WithMany()
                        .HasForeignKey("BillStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ConditionsBooklet", "ConditionsBooklet")
                        .WithOne("BillInfo")
                        .HasForeignKey("MOF.Etimad.Monafasat.Core.Entities.BillInfo", "ConditionsBookletID");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Invitation", "Invitation")
                        .WithOne("BillInfo")
                        .HasForeignKey("MOF.Etimad.Monafasat.Core.Entities.BillInfo", "InvitationId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BillPaymentDetails", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.BillInfo", null)
                        .WithMany("BillPaymentDetails")
                        .HasForeignKey("BillInfoId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderFeesType", "tenderFeesType")
                        .WithMany()
                        .HasForeignKey("FeesTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Branch", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.GovAgency", "Agency")
                        .WithMany("Branches")
                        .HasForeignKey("AgencyCode");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BranchAddress", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Branch", null)
                        .WithMany("BranchAddresses")
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BranchCommittee", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Branch", "Branch")
                        .WithMany("BranchCommittees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Committee", "Committee")
                        .WithMany("BranchCommittees")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.BranchUser", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Branch", "Branch")
                        .WithMany("BranchUsers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("BranchUsers")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Committee", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.GovAgency", "Agency")
                        .WithMany("Committees")
                        .HasForeignKey("AgencyCode");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.CommitteeType", "CommitteeType")
                        .WithMany("Committees")
                        .HasForeignKey("CommitteeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.CommitteeUser", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Committee", "Committee")
                        .WithMany("CommitteeUsers")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("CommitteeUsers")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ConditionTemplateActivities", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ActivityTemplate", "ActivityTemplate")
                        .WithMany("ConditionTemplateActivities")
                        .HasForeignKey("ActivityTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ConditionsTemplateSection", "ConditionsTemplateSection")
                        .WithMany("ConditionTemplateActivities")
                        .HasForeignKey("ConditionsTemplateSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ConditionsBooklet", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("CommericalRegisterNo");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("ConditionsBooklets")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ConditionsTemplateCertificate", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.VendorCertificates", "Certificate")
                        .WithMany("ConditionsTemplateCertificates")
                        .HasForeignKey("CerificateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplate", "ConditionsTemplate")
                        .WithMany("TemplateCertificates")
                        .HasForeignKey("ConditionsTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ConstructionWork", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ConstructionWork", "ParentWork")
                        .WithMany("SubWorks")
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.DeviceToken", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.DeviceTokenNotification", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.DeviceToken", "DeviceToken")
                        .WithMany("NotificationSetting")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Enquiry", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequest", "AgencyCommunicationRequest")
                        .WithMany("Enquiries")
                        .HasForeignKey("AgencyCommunicationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("CommericalRegisterNo");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("Enquiries")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.EnquiryReply", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Enquiry", "Enquiry")
                        .WithMany("EnquiryReplies")
                        .HasForeignKey("EnquiryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.EnquiryReplyStatus", "EnquiryReplyStatus")
                        .WithMany()
                        .HasForeignKey("EnquiryReplyStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ExtendOffersValidity", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequest", "AgencyCommunicationRequest")
                        .WithOne("ExtendOffersValidity")
                        .HasForeignKey("MOF.Etimad.Monafasat.Core.Entities.ExtendOffersValidity", "AgencyCommunicationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ExtendOffersValidityAttachment", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AttachmentType", "AttachmentType")
                        .WithMany()
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ExtendOffersValiditySupplier", "ExtendOffersValiditySupplier")
                        .WithOne("ExtendOffersValidityAttachment")
                        .HasForeignKey("MOF.Etimad.Monafasat.Core.Entities.ExtendOffersValidityAttachment", "ExtendOffersValiditySupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.ExtendOffersValiditySupplier", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ExtendOffersValidity", "ExtendOffersValidity")
                        .WithMany("ExtendOffersValiditySuppliers")
                        .HasForeignKey("ExtendOffersValidityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Offer", "Offer")
                        .WithOne("ExtendOffersValiditySupplier")
                        .HasForeignKey("MOF.Etimad.Monafasat.Core.Entities.ExtendOffersValiditySupplier", "OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierCR");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.SupplierExtendOffersValidityStatus", "SupplierExtendOffersValidityStatus")
                        .WithMany()
                        .HasForeignKey("SupplierExtendOfferValidityStatusId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.FavouriteSupplier", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.FavouriteSupplierList", "FavouriteSupplierList")
                        .WithMany("FavouriteSuppliers")
                        .HasForeignKey("FavouriteSupplierListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany("FavouriteSuppliers")
                        .HasForeignKey("SupplierCRNumber");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.FavouriteSupplierList", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.GovAgency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyCode");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.FavouriteSupplierTender", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("FavouriteSupplierTenders")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Invitation", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany("Invitations")
                        .HasForeignKey("CommericalRegisterNo");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.InvitationType", "InvitationType")
                        .WithMany()
                        .HasForeignKey("InvitationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.InvitationStatus", "InvitationStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("Invitations")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.JoinTechnicalCommittee", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Committee", "Committee")
                        .WithMany("JoinTechnicalCommittees")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Enquiry", "Enquiry")
                        .WithMany("JoinTechnicalCommittees")
                        .HasForeignKey("EnquiryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MandatoryList", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.MandatoryListStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MandatoryListChangeRequest", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.MandatoryList", "OriginalEntity")
                        .WithMany("ChangeRequests")
                        .HasForeignKey("OriginalEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.MandatoryListChangeRequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MandatoryListProduct", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.MandatoryList", "MandatoryList")
                        .WithMany("Products")
                        .HasForeignKey("MandatoryListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MandatoryListProductChangeRequest", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.MandatoryListChangeRequest", null)
                        .WithMany("Products")
                        .HasForeignKey("MandatoryListChangeRequestId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.MobileAlert", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.DeviceToken", "DeviceToken")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.InvitationStatus", "MessageStatus")
                        .WithMany()
                        .HasForeignKey("MessageStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiation", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequest", "AgencyCommunicationRequest")
                        .WithMany("Negotiations")
                        .HasForeignKey("AgencyRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.NegotiationReason", "NegotiationReason")
                        .WithMany()
                        .HasForeignKey("NegotiationReasonId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.NegotiationType", "NegotiationType")
                        .WithMany()
                        .HasForeignKey("NegotiationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.NegotiationStatus", "NegotiationStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.NegotiationAttachment", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AttachmentType", "AttachmentType")
                        .WithMany()
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Negotiation", "Negotiation")
                        .WithMany("Attachments")
                        .HasForeignKey("NegotiationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationFirstStageSupplier", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationFirstStage", "NegotiationFirstStage")
                        .WithMany("NegotiationFirstStageSuppliers")
                        .HasForeignKey("NegotiationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.NegotiationSupplierStatus", "NegotiationSupplierStatus")
                        .WithMany()
                        .HasForeignKey("NegotiationSupplierStatusId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Offer", "Offer")
                        .WithMany("negotiationFirstStageSuppliers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierCR");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationQuantityTable", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationSecondStage", "NegotiationSecondStage")
                        .WithMany("negotiationQuantitiestable")
                        .HasForeignKey("refNegotiationSecondStage")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationQuantityTableItem", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationQuantityTable", "NegotiationQuantityTable")
                        .WithMany("NegotiationQuantityTableItems")
                        .HasForeignKey("NegotiationQuantityTableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationSupplierQuantityTable", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.SupplierTenderQuantityTable", "SupplierQuantityTable")
                        .WithMany()
                        .HasForeignKey("SupplierQuantityTableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationSecondStage", "NegotiationSecondStage")
                        .WithMany("negotiationSupplierQuantitiestable")
                        .HasForeignKey("refNegotiationSecondStage")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationSupplierQuantityTableItem", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationSupplierQuantityTable", "negotiationSupplierQuantityTable")
                        .WithMany("NegotiationQuantityTableItems")
                        .HasForeignKey("NegotiationSupplierQuantityTableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.NotificationOperationCode", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.NotificationCategory", "NotificationCategory")
                        .WithMany()
                        .HasForeignKey("NotificationCategoryId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Offer", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany("offers")
                        .HasForeignKey("CommericalRegisterNo");

                    b.HasOne("MOF.Etimad.Monafasat.Core.OfferPresentationWay", "OfferPresentationWay")
                        .WithMany()
                        .HasForeignKey("OfferPresentationWayId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.OfferStatus", "Status")
                        .WithMany()
                        .HasForeignKey("OfferStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("Offers")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.OfferHistory", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderAction", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Offer", "Offer")
                        .WithMany("OffersHistory")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.OfferStatus", "OfferStatus")
                        .WithMany()
                        .HasForeignKey("OfferStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderStatus", "TenderStatus")
                        .WithMany()
                        .HasForeignKey("TenderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.OfferSolidarity", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("CRNumber");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Offer", "Offer")
                        .WithMany("Combined")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.OfferSolidarityStatus", "SolidarityStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PlaintRequestAttachment", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AttachmentType", "AttachmentType")
                        .WithMany()
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.PlaintRequest", "PlaintRequest")
                        .WithMany("Attachments")
                        .HasForeignKey("PlaintRequestId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PostQualificationSuppliersInvitations", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("CommercialNumber");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "PostQualification")
                        .WithMany("PostQualificationInvitations")
                        .HasForeignKey("PostQualificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.InvitationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PrePlanning", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.GovAgency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyCode");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.PrePlanningStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.YearQuarter", "YearQuarter")
                        .WithMany()
                        .HasForeignKey("YearQuarterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PrePlanningArea", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.PrePlanning", "PrePlanning")
                        .WithMany("PrePlanningAreas")
                        .HasForeignKey("PrePlanningId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PrePlanningCountry", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.PrePlanning", "PrePlanning")
                        .WithMany("PrePlanningCountries")
                        .HasForeignKey("PrePlanningId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.PrePlanningProjectType", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.PrePlanning", "PrePlanning")
                        .WithMany("PrePlanningProjectTypes")
                        .HasForeignKey("PrePlanningId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationCategoryResult", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationItemCategory", "QualificationItemCategory")
                        .WithMany("QualificationCategoryResults")
                        .HasForeignKey("QualificationItemCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierSelectedCr");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("QualificationCategoryResults")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationConfiguration", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationItem", "QualificationItem")
                        .WithMany("QualificationConfigurations")
                        .HasForeignKey("QualificationItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("QualificationConfigurations")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationConfigurationAttachment", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationSupplierData", "QualificationSupplierData")
                        .WithMany("QualificationConfigurationAttachments")
                        .HasForeignKey("QualificationSupplierDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationEvaluation.QualificationSubCategoryConfiguration", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationSubCategory", "QualificationSubCategory")
                        .WithMany()
                        .HasForeignKey("QualificationSubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("QualificationSubCategoryConfigurations")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationEvaluation.QualificationSupplierProject", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationSupplierData", "QualificationSupplierData")
                        .WithMany("QualificationSupplierProjects")
                        .HasForeignKey("QualificationSupplierDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierSelectedCr");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany()
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationFinalResult", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationLookup", "QualificationLookup")
                        .WithMany()
                        .HasForeignKey("QualificationLookupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierSelectedCr");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("QualificationFinalResults")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationItem", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationItemType", "QualificationItemType")
                        .WithMany("QualificationItems")
                        .HasForeignKey("QualificationItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationSubCategory", "QualificationSubCategory")
                        .WithMany("QualificationItems")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationLookup", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationLookupsName", "QualificationLookupsName")
                        .WithMany("QualificationLookups")
                        .HasForeignKey("QualificationLookupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationSubCategory", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationItemCategory", "QualificationItemCategory")
                        .WithMany("QualificationSubCategories")
                        .HasForeignKey("QualificationCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationSubCategoryResult", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationSubCategory", "QualificationSubCategory")
                        .WithMany("QualificationSubCategoryResults")
                        .HasForeignKey("QualificationSubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierSelectedCr");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("QualificationSubCategoryResults")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationSupplierData", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationConfiguration", "QualificationConfiguration")
                        .WithMany("QualificationSupplierData")
                        .HasForeignKey("QualificationConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationItem", "QualificationItem")
                        .WithMany("QualificationSupplierDatas")
                        .HasForeignKey("QualificationItemId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationLookup", "QualificationLookup")
                        .WithMany()
                        .HasForeignKey("QualificationLookupId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierSelectedCr");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("QualificationSupplierData")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationSupplierDataYearly", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationItem", "QualificationItem")
                        .WithMany()
                        .HasForeignKey("QualificationItemId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationYear", "QualificationYear")
                        .WithMany()
                        .HasForeignKey("QualificationYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierSelectedCr");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany()
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.QualificationTypeCategory", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationSubCategory", "QualificationSubCategory")
                        .WithMany("QualificationTypeCategories")
                        .HasForeignKey("QualificationSubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationType", "QualificationType")
                        .WithMany("QualificationTypeCategories")
                        .HasForeignKey("QualificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.RejectionHistory", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequest", null)
                        .WithMany("RejectionHistories")
                        .HasForeignKey("AgencyCommunicationRequestAgencyRequestId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.RequestsRejectionType", "RequestsRejectionType")
                        .WithMany()
                        .HasForeignKey("RequestsRejectionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierAttachment", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Offer", "Offer")
                        .WithMany("Attachment")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierBankGuaranteeDetail", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Offer", "Offer")
                        .WithMany("BankGuaranteeDetails")
                        .HasForeignKey("OfferId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierCombinedDetail", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.OfferSolidarity", "Combined")
                        .WithOne("SupplierCombinedDetail")
                        .HasForeignKey("MOF.Etimad.Monafasat.Core.Entities.SupplierCombinedDetail", "CombinedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierExtendOfferDatesRequest", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequest", "AgencyCommunicationRequest")
                        .WithMany()
                        .HasForeignKey("AgencyCommunicationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierPreQualificationAttachment", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.SupplierPreQualificationDocument", "SupplierPreQualificationDocument")
                        .WithMany("supplierPreQualificationAttachments")
                        .HasForeignKey("SupPreQAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierPreQualificationDocument", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "PreQualification")
                        .WithMany("PreQualificationApplyDocuments")
                        .HasForeignKey("PreQualificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.OfferStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierSpecificationDetail", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.SupplierCombinedDetail", "CompinedDetail")
                        .WithMany("SpecificationDetails")
                        .HasForeignKey("CompinedDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ConstructionWork", "ConstructionWork")
                        .WithMany()
                        .HasForeignKey("ConstructionWorkId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.MaintenanceRunningWork", "MaintenanceRunningWork")
                        .WithMany()
                        .HasForeignKey("MaintenanceRunningWorkId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierTenderQuantityTable", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Offer", "Offer")
                        .WithMany("SupplierTenderQuantityTables")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTable", "TenderQuantityTable")
                        .WithMany()
                        .HasForeignKey("TenederQuantityId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierTenderQuantityTableItem", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.SupplierTenderQuantityTable", "SupplierTenderQuantityTable")
                        .WithMany("SupplierTenderQuantityTableItems")
                        .HasForeignKey("SupplierTenderQuantityTableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTableItem", "TenderQuantityTableItem")
                        .WithMany()
                        .HasForeignKey("TenderQuantityTableItemId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierViolator", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("CR");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderChangeRequest", "TenderChangeRequest")
                        .WithMany("SupplierViolators")
                        .HasForeignKey("TenderChangeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TechnicianReportAttachment", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AttachmentType", "AttachmentType")
                        .WithMany()
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Offer", "Offer")
                        .WithMany("TechnicianReportAttachments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Tender", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.GovAgency", "Agency")
                        .WithMany("Tenders")
                        .HasForeignKey("AgencyCode");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgreementType", "AgreementType")
                        .WithMany()
                        .HasForeignKey("AgreementTypeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderConditoinsStatus", "TenderConditoinsStatus")
                        .WithMany()
                        .HasForeignKey("ConditionTemplateStageStatusId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Address", "ConditionsBookletDeliveryAddress")
                        .WithMany()
                        .HasForeignKey("ConditionsBookletDeliveryAddressId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.TenderCreatedByType", "TenderCreatedByType")
                        .WithMany()
                        .HasForeignKey("CreatedByTypeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Committee", "DirectPurchaseCommittee")
                        .WithMany()
                        .HasForeignKey("DirectPurchaseCommitteeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.InvitationType", "InvitationType")
                        .WithMany()
                        .HasForeignKey("InvitationTypeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.OfferPresentationWay", "OfferPresentationWay")
                        .WithMany()
                        .HasForeignKey("OfferPresentationWayId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Committee", "OffersCheckingCommittee")
                        .WithMany()
                        .HasForeignKey("OffersCheckingCommitteeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Address", "OffersOpeningAddress")
                        .WithMany()
                        .HasForeignKey("OffersOpeningAddressId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Committee", "OffersOpeningCommittee")
                        .WithMany()
                        .HasForeignKey("OffersOpeningCommitteeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "PostQualificationTender")
                        .WithMany("PostQualifications")
                        .HasForeignKey("PostQualificationTenderId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Committee", "OffersPreQualificationCommittee")
                        .WithMany()
                        .HasForeignKey("PreQualificationCommitteeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "PreQualification")
                        .WithMany()
                        .HasForeignKey("PreQualificationId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "PreviousFramWork")
                        .WithMany()
                        .HasForeignKey("PreviousFramWorkId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.QualificationType", "QualificationType")
                        .WithMany()
                        .HasForeignKey("QualificationTypeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.ReasonForLimitedTenderType", "ReasonForLimitedTenderType")
                        .WithMany()
                        .HasForeignKey("ReasonForLimitedTenderTypeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.ReasonForPurchaseTenderType", "ReasonForPurchaseTenderType")
                        .WithMany()
                        .HasForeignKey("ReasonForPurchaseTenderTypeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.SpendingCategory", "SpendingCategory")
                        .WithMany()
                        .HasForeignKey("SpendingCategoryId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Committee", "TechnicalOrganization")
                        .WithMany()
                        .HasForeignKey("TechnicalOrganizationId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplate", "TenderConditionsTemplate")
                        .WithOne("Tender")
                        .HasForeignKey("MOF.Etimad.Monafasat.Core.Entities.Tender", "TenderConditionsTemplateId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "TenderFirstStage")
                        .WithMany()
                        .HasForeignKey("TenderFirstStageId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("TenderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderType", "TenderType")
                        .WithMany()
                        .HasForeignKey("TenderTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderUnitStatus", "TenderUnitStatus")
                        .WithMany()
                        .HasForeignKey("TenderUnitStatusId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Committee", "VROCommittee")
                        .WithMany()
                        .HasForeignKey("VROCommitteeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Branch", "VRORelatedBranch")
                        .WithMany()
                        .HasForeignKey("VRORelatedBranchId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderActivity", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Activity", "Activity")
                        .WithMany("TenderActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("TenderActivities")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderAgreementAgency", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.GovAgency", "GovAgency")
                        .WithMany()
                        .HasForeignKey("AgencyCode");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("TenderAgreementAgencies")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderArea", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Area", "Area")
                        .WithMany("TenderAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("TenderAreas")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderAttachment", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AttachmentType", "AttachmentType")
                        .WithMany()
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("Attachments")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderAttachmentChanges", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AttachmentType", "AttachmentType")
                        .WithMany()
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderAttachment", "TenderAttachment")
                        .WithMany()
                        .HasForeignKey("DeletedAttachmentId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderChangeRequest", "ChangeRequest")
                        .WithMany("AttachmentChanges")
                        .HasForeignKey("TenderChangeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderAwardingHistory", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("CommercialRegisterationNumber");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("TenderAwardingHistories")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderChangeRequest", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.CancelationReason", "CancelationReason")
                        .WithMany()
                        .HasForeignKey("CancelationReasonId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ChangeRequestStatus", "ChangeRequestStatus")
                        .WithMany()
                        .HasForeignKey("ChangeRequestStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ChangeRequestType", "ChangeRequestType")
                        .WithMany()
                        .HasForeignKey("ChangeRequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("ChangeRequests")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplate", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplateMaterialInofmration", "TenderConditionsTemplateMaterialInofmration")
                        .WithOne("TenderConditionsTemplate")
                        .HasForeignKey("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplate", "TenderConditionsTemplateMaterialInofmrationId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplateTechnicalDeclration", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplate", "ConditionsTemplate")
                        .WithMany("TenderConditionsTemplateTechnicalDelrations")
                        .HasForeignKey("ConditionsTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplateTechnicalOutput", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderConditionsTemplate", "ConditionsTemplate")
                        .WithMany("TenderConditionsTemplateTechnicalOutputs")
                        .HasForeignKey("ConditionsTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderConstructionWork", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ConstructionWork", "ConstructionWork")
                        .WithMany("TenderConstructionWorks")
                        .HasForeignKey("ConstructionWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("TenderConstructionWorks")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderCountry", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Country", "Country")
                        .WithMany("TenderCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("TenderCountries")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderHistory", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderAction", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("TenderHistories")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderMaintenanceRunnigWork", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.MaintenanceRunningWork", "MaintenanceRunningWork")
                        .WithMany("TenderMentainanceRunnigWorks")
                        .HasForeignKey("MaintenanceRunningWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("TenderMaintenanceRunnigWorks")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTable", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("TenderQuantityTables")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTableChanges", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderChangeRequest", "ChangeRequest")
                        .WithMany("TenderQuantityTableChanges")
                        .HasForeignKey("TenderChangeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTable", "TenderQuantityTable")
                        .WithMany()
                        .HasForeignKey("TenderQuantitiesTableId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTableItem", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTable", "TenderQuantityTable")
                        .WithMany("TenderQuantityTableItems")
                        .HasForeignKey("TenderQuantityTableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTableItemChanges", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderQuantityTableChanges", "TenderQuantityTableChanges")
                        .WithMany("TenderQuantityTableItemChanges")
                        .HasForeignKey("TenderQuantityTableChangesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderUnitAssign", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("TenderUnitAssigns")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.TenderUnitStatusesHistory", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("TenderUnitStatusesHistories")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderUnitStatus", "TenderUnitStatus")
                        .WithMany()
                        .HasForeignKey("TenderUnitStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderUnitUpdateType", "TenderUnitUpdateType")
                        .WithMany()
                        .HasForeignKey("TenderUnitUpdateTypeId");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.UnRegisteredSuppliersInvitation", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Lookups.InvitationStatus", "InvitationStatus")
                        .WithMany()
                        .HasForeignKey("InvitationStatusId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Tender", "Tender")
                        .WithMany("UnRegisteredSuppliersInvitation")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.UserNotificationSetting", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany("NotificationSetting")
                        .HasForeignKey("Cr");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.NotificationOperationCode", "NotificationOperationCode")
                        .WithMany()
                        .HasForeignKey("NotificationCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserProfile", "User")
                        .WithMany("NotificationSetting")
                        .HasForeignKey("UserProfileId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.VerificationCode", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.VerificationType", "VerificationType")
                        .WithMany()
                        .HasForeignKey("VerificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.EscalationRequest", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.PlaintRequest", "PlaintRequest")
                        .WithOne("EscalationRequest")
                        .HasForeignKey("MOF.Etimad.Monafasat.Core.EscalationRequest", "PlaintRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.GovAgency", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.GovAgency", "VROOfficeCodeRelated")
                        .WithMany()
                        .HasForeignKey("VROOfficeCode");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.PlaintRequest", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequest", "AgencyCommunicationRequest")
                        .WithMany("PlaintRequests")
                        .HasForeignKey("AgencyCommunicationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Offer", "Offer")
                        .WithMany("PlaintRequests")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.PlaintRequestNotification", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.AgencyCommunicationRequest", "CommunicationRequest")
                        .WithOne("PlaintNotification")
                        .HasForeignKey("MOF.Etimad.Monafasat.Core.PlaintRequestNotification", "CommunicationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.SupplierBlock", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.GovAgency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyCode");

                    b.HasOne("MOF.Etimad.Monafasat.Core.BlockStatus", "BlockStatus")
                        .WithMany()
                        .HasForeignKey("BlockStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.BlockType", "BlockType")
                        .WithMany()
                        .HasForeignKey("BlockTypeId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany("SupplierBlocks")
                        .HasForeignKey("CommercialRegistrationNo");
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.SupplierUserProfile", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Supplier", "Supplier")
                        .WithMany("SupplierUserProfiles")
                        .HasForeignKey("SelectedCr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("SupplierUserProfiles")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.TenderDatesChange", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.TenderChangeRequest", "ChangeRequest")
                        .WithMany("RevisionDates")
                        .HasForeignKey("TenderChangeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.UserAgencyRole", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.GovAgency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyCode");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("UserAgencyRoles")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationSecondStage", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Negotiations.NegotiationFirstStage", "Negotiationfirststage")
                        .WithMany()
                        .HasForeignKey("NegotiationFirstStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Offer", "Offer")
                        .WithMany("negotiations")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierBankGuaranteeAttachment", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOF.Etimad.Monafasat.Core.Entities.SupplierSpecificationAttachment", b =>
                {
                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.ConstructionWork", "ConstructionWork")
                        .WithMany()
                        .HasForeignKey("ConstructionWorkId");

                    b.HasOne("MOF.Etimad.Monafasat.Core.Entities.MaintenanceRunningWork", "MaintenanceRunningWork")
                        .WithMany()
                        .HasForeignKey("MaintenanceRunningWorkId");
                });
#pragma warning restore 612, 618
        }
    }
}
